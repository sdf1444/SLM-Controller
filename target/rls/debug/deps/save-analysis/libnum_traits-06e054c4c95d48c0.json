{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11","program":"C:\\Users\\Spencer Du\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","num_traits","C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=06e054c4c95d48c0","-C","extra-filename=-06e054c4c95d48c0","--out-dir","c:\\Users\\Spencer Du\\Documents\\MSc Computing with placement Cardiff Uni\\Placement\\SLM-control\\Rust\\assignment\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Spencer Du\\Documents\\MSc Computing with placement Cardiff Uni\\Placement\\SLM-control\\Rust\\assignment\\target\\rls\\debug\\deps","--cap-lints","allow","--cfg","has_i128","--error-format=json","--sysroot","C:\\Users\\Spencer Du\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Spencer Du\\Documents\\MSc Computing with placement Cardiff Uni\\Placement\\SLM-control\\Rust\\assignment\\target\\rls\\debug\\deps\\libnum_traits-06e054c4c95d48c0.rmeta"},"prelude":{"crate_id":{"name":"num_traits","disambiguator":[9658936450980938914,14161967064833628679]},"crate_root":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src","external_crates":[{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","num":4,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}}],"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":472,"byte_end":19148,"line_start":11,"line_end":569,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1043,"byte_end":1050,"line_start":32,"line_end":32,"column_start":17,"column_end":24},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1114,"byte_end":1119,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"alias_span":null,"name":"Float","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2106},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1136,"byte_end":1146,"line_start":35,"line_end":35,"column_start":16,"column_end":26},"alias_span":null,"name":"FloatConst","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1255,"byte_end":1259,"line_start":37,"line_end":37,"column_start":16,"column_end":20},"alias_span":null,"name":"cast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1261,"byte_end":1272,"line_start":37,"line_end":37,"column_start":22,"column_end":33},"alias_span":null,"name":"AsPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1274,"byte_end":1287,"line_start":37,"line_end":37,"column_start":35,"column_end":48},"alias_span":null,"name":"FromPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1289,"byte_end":1296,"line_start":37,"line_end":37,"column_start":50,"column_end":57},"alias_span":null,"name":"NumCast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1298,"byte_end":1309,"line_start":37,"line_end":37,"column_start":59,"column_end":70},"alias_span":null,"name":"ToPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1333,"byte_end":1336,"line_start":38,"line_end":38,"column_start":22,"column_end":25},"alias_span":null,"name":"one","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1338,"byte_end":1342,"line_start":38,"line_end":38,"column_start":27,"column_end":31},"alias_span":null,"name":"zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1344,"byte_end":1347,"line_start":38,"line_end":38,"column_start":33,"column_end":36},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1349,"byte_end":1353,"line_start":38,"line_end":38,"column_start":38,"column_end":42},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1369,"byte_end":1376,"line_start":39,"line_end":39,"column_start":14,"column_end":21},"alias_span":null,"name":"PrimInt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1406,"byte_end":1416,"line_start":41,"line_end":41,"column_start":5,"column_end":15},"alias_span":null,"name":"CheckedAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1418,"byte_end":1428,"line_start":41,"line_end":41,"column_start":17,"column_end":27},"alias_span":null,"name":"CheckedDiv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1430,"byte_end":1440,"line_start":41,"line_end":41,"column_start":29,"column_end":39},"alias_span":null,"name":"CheckedMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1442,"byte_end":1452,"line_start":41,"line_end":41,"column_start":41,"column_end":51},"alias_span":null,"name":"CheckedNeg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1454,"byte_end":1464,"line_start":41,"line_end":41,"column_start":53,"column_end":63},"alias_span":null,"name":"CheckedRem","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1466,"byte_end":1476,"line_start":41,"line_end":41,"column_start":65,"column_end":75},"alias_span":null,"name":"CheckedShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1478,"byte_end":1488,"line_start":41,"line_end":41,"column_start":77,"column_end":87},"alias_span":null,"name":"CheckedShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1490,"byte_end":1500,"line_start":41,"line_end":41,"column_start":89,"column_end":99},"alias_span":null,"name":"CheckedSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1523,"byte_end":1526,"line_start":43,"line_end":43,"column_start":19,"column_end":22},"alias_span":null,"name":"Inv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":398},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1551,"byte_end":1557,"line_start":44,"line_end":44,"column_start":24,"column_end":30},"alias_span":null,"name":"MulAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1559,"byte_end":1571,"line_start":44,"line_end":44,"column_start":32,"column_end":44},"alias_span":null,"name":"MulAddAssign","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1599,"byte_end":1609,"line_start":45,"line_end":45,"column_start":26,"column_end":36},"alias_span":null,"name":"Saturating","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1635,"byte_end":1646,"line_start":46,"line_end":46,"column_start":25,"column_end":36},"alias_span":null,"name":"WrappingAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1648,"byte_end":1659,"line_start":46,"line_end":46,"column_start":38,"column_end":49},"alias_span":null,"name":"WrappingMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1661,"byte_end":1672,"line_start":46,"line_end":46,"column_start":51,"column_end":62},"alias_span":null,"name":"WrappingShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1674,"byte_end":1685,"line_start":46,"line_end":46,"column_start":64,"column_end":75},"alias_span":null,"name":"WrappingShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1687,"byte_end":1698,"line_start":46,"line_end":46,"column_start":77,"column_end":88},"alias_span":null,"name":"WrappingSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":475},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1715,"byte_end":1726,"line_start":47,"line_end":47,"column_start":15,"column_end":26},"alias_span":null,"name":"checked_pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1728,"byte_end":1731,"line_start":47,"line_end":47,"column_start":28,"column_end":31},"alias_span":null,"name":"pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1733,"byte_end":1736,"line_start":47,"line_end":47,"column_start":33,"column_end":36},"alias_span":null,"name":"Pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1754,"byte_end":1757,"line_start":48,"line_end":48,"column_start":16,"column_end":19},"alias_span":null,"name":"abs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1759,"byte_end":1766,"line_start":48,"line_end":48,"column_start":21,"column_end":28},"alias_span":null,"name":"abs_sub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1768,"byte_end":1774,"line_start":48,"line_end":48,"column_start":30,"column_end":36},"alias_span":null,"name":"signum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1776,"byte_end":1782,"line_start":48,"line_end":48,"column_start":38,"column_end":44},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1784,"byte_end":1792,"line_start":48,"line_end":48,"column_start":46,"column_end":54},"alias_span":null,"name":"Unsigned","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":472,"byte_end":19148,"line_start":11,"line_end":569,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":13},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":28},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":54},{"krate":0,"index":58},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":98},{"krate":0,"index":182},{"krate":0,"index":290},{"krate":0,"index":318},{"krate":0,"index":350},{"krate":0,"index":459},{"krate":0,"index":478},{"krate":0,"index":534},{"krate":0,"index":564},{"krate":0,"index":567},{"krate":0,"index":570},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":599},{"krate":0,"index":4317},{"krate":0,"index":4320},{"krate":0,"index":4323},{"krate":0,"index":4326},{"krate":0,"index":4329},{"krate":0,"index":4332},{"krate":0,"index":4335},{"krate":0,"index":4338},{"krate":0,"index":4341},{"krate":0,"index":4344},{"krate":0,"index":4347},{"krate":0,"index":4350},{"krate":0,"index":600},{"krate":0,"index":4353},{"krate":0,"index":4358},{"krate":0,"index":4360},{"krate":0,"index":4362},{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":4364},{"krate":0,"index":4371},{"krate":0,"index":607},{"krate":0,"index":609},{"krate":0,"index":611}],"decl_id":null,"docs":" Numeric traits for generic mathematics","sig":null,"attributes":[{"value":"deny(unconditional_recursion)","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":667,"byte_end":700,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"no_std","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":701,"byte_end":711,"line_start":19,"line_end":19,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\bounds.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bounds","qualname":"::bounds","value":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\bounds.rs","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":81},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":613},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":622},{"krate":0,"index":625},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":634},{"krate":0,"index":637},{"krate":0,"index":640},{"krate":0,"index":643},{"krate":0,"index":646},{"krate":0,"index":91},{"krate":0,"index":649},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":652},{"krate":0,"index":675},{"krate":0,"index":697},{"krate":0,"index":718},{"krate":0,"index":738},{"krate":0,"index":757},{"krate":0,"index":775},{"krate":0,"index":792},{"krate":0,"index":808},{"krate":0,"index":823},{"krate":0,"index":837},{"krate":0,"index":850},{"krate":0,"index":862},{"krate":0,"index":873},{"krate":0,"index":883},{"krate":0,"index":892},{"krate":0,"index":900},{"krate":0,"index":907},{"krate":0,"index":913},{"krate":0,"index":918},{"krate":0,"index":922},{"krate":0,"index":925}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\bounds.rs","byte_start":20629,"byte_end":20636,"line_start":9,"line_end":9,"column_start":11,"column_end":18},"name":"Bounded","qualname":"::bounds::Bounded","value":"Bounded","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89}],"decl_id":null,"docs":" Numbers which have upper and lower bounds\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\bounds.rs","byte_start":20772,"byte_end":20781,"line_start":12,"line_end":12,"column_start":8,"column_end":17},"name":"min_value","qualname":"::bounds::Bounded::min_value","value":"fn () -> Self","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" returns the smallest finite number this type can represent\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\bounds.rs","byte_start":20866,"byte_end":20875,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"max_value","qualname":"::bounds::Bounded::max_value","value":"fn () -> Self","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" returns the largest finite number this type can represent\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cast","qualname":"::cast","value":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":113},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":928},{"krate":0,"index":943},{"krate":0,"index":958},{"krate":0,"index":973},{"krate":0,"index":988},{"krate":0,"index":1003},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":1018},{"krate":0,"index":1033},{"krate":0,"index":1048},{"krate":0,"index":1063},{"krate":0,"index":1078},{"krate":0,"index":1093},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":1108},{"krate":0,"index":1159},{"krate":0,"index":145},{"krate":0,"index":160},{"krate":0,"index":1210},{"krate":0,"index":1225},{"krate":0,"index":1240},{"krate":0,"index":1255},{"krate":0,"index":1270},{"krate":0,"index":1285},{"krate":0,"index":1300},{"krate":0,"index":1315},{"krate":0,"index":1330},{"krate":0,"index":1345},{"krate":0,"index":1360},{"krate":0,"index":1375},{"krate":0,"index":1390},{"krate":0,"index":1405},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":1448},{"krate":0,"index":1451},{"krate":0,"index":1454},{"krate":0,"index":1457},{"krate":0,"index":1460},{"krate":0,"index":1463},{"krate":0,"index":1466},{"krate":0,"index":1469},{"krate":0,"index":1472},{"krate":0,"index":1475},{"krate":0,"index":1478},{"krate":0,"index":1481},{"krate":0,"index":1484},{"krate":0,"index":1487},{"krate":0,"index":174},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1516},{"krate":0,"index":1518},{"krate":0,"index":1520},{"krate":0,"index":1522},{"krate":0,"index":1524},{"krate":0,"index":1526},{"krate":0,"index":1528},{"krate":0,"index":1530},{"krate":0,"index":1532},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1540},{"krate":0,"index":1542},{"krate":0,"index":1544},{"krate":0,"index":1546},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1562},{"krate":0,"index":1564},{"krate":0,"index":1566},{"krate":0,"index":1568},{"krate":0,"index":1570},{"krate":0,"index":1572},{"krate":0,"index":1574},{"krate":0,"index":1576},{"krate":0,"index":1578},{"krate":0,"index":1580},{"krate":0,"index":1582},{"krate":0,"index":1584},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1592},{"krate":0,"index":1594},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1600},{"krate":0,"index":1602},{"krate":0,"index":1604},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1610},{"krate":0,"index":1612},{"krate":0,"index":1614},{"krate":0,"index":1616},{"krate":0,"index":1618},{"krate":0,"index":1620},{"krate":0,"index":1622},{"krate":0,"index":1624},{"krate":0,"index":1626},{"krate":0,"index":1628},{"krate":0,"index":1630},{"krate":0,"index":1632},{"krate":0,"index":1634},{"krate":0,"index":1636},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1642},{"krate":0,"index":1644},{"krate":0,"index":1646},{"krate":0,"index":1648},{"krate":0,"index":1650},{"krate":0,"index":1652},{"krate":0,"index":1654},{"krate":0,"index":1656},{"krate":0,"index":1658},{"krate":0,"index":1660},{"krate":0,"index":1662},{"krate":0,"index":1664},{"krate":0,"index":1666},{"krate":0,"index":1668},{"krate":0,"index":1670},{"krate":0,"index":1672},{"krate":0,"index":1674},{"krate":0,"index":1676},{"krate":0,"index":1678},{"krate":0,"index":1680},{"krate":0,"index":1682},{"krate":0,"index":1684},{"krate":0,"index":1686},{"krate":0,"index":1688},{"krate":0,"index":1690},{"krate":0,"index":1692},{"krate":0,"index":1694},{"krate":0,"index":1696},{"krate":0,"index":1698},{"krate":0,"index":1700},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1714},{"krate":0,"index":1716},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1752},{"krate":0,"index":1754},{"krate":0,"index":1756},{"krate":0,"index":1758},{"krate":0,"index":1760},{"krate":0,"index":1762},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1784},{"krate":0,"index":1786},{"krate":0,"index":1788},{"krate":0,"index":1790},{"krate":0,"index":1792},{"krate":0,"index":1794},{"krate":0,"index":1796},{"krate":0,"index":1798},{"krate":0,"index":1800},{"krate":0,"index":1802},{"krate":0,"index":1804},{"krate":0,"index":1806},{"krate":0,"index":1808},{"krate":0,"index":1810},{"krate":0,"index":1812},{"krate":0,"index":1814},{"krate":0,"index":1816},{"krate":0,"index":1818},{"krate":0,"index":1820},{"krate":0,"index":1822},{"krate":0,"index":1824},{"krate":0,"index":1826},{"krate":0,"index":1828},{"krate":0,"index":1830},{"krate":0,"index":1832},{"krate":0,"index":1834},{"krate":0,"index":1836},{"krate":0,"index":1838},{"krate":0,"index":1840},{"krate":0,"index":1842},{"krate":0,"index":1844},{"krate":0,"index":1846},{"krate":0,"index":1848},{"krate":0,"index":1850},{"krate":0,"index":1852},{"krate":0,"index":1854},{"krate":0,"index":1856},{"krate":0,"index":1858},{"krate":0,"index":1860},{"krate":0,"index":1862},{"krate":0,"index":1864},{"krate":0,"index":1866},{"krate":0,"index":1868},{"krate":0,"index":1870},{"krate":0,"index":1872},{"krate":0,"index":1874},{"krate":0,"index":1876},{"krate":0,"index":1878},{"krate":0,"index":1880},{"krate":0,"index":1882},{"krate":0,"index":1884},{"krate":0,"index":1886},{"krate":0,"index":1888},{"krate":0,"index":1890},{"krate":0,"index":1892},{"krate":0,"index":1894},{"krate":0,"index":1896},{"krate":0,"index":1898},{"krate":0,"index":1900},{"krate":0,"index":1902},{"krate":0,"index":1904},{"krate":0,"index":1906},{"krate":0,"index":1908},{"krate":0,"index":1910},{"krate":0,"index":1912},{"krate":0,"index":1914},{"krate":0,"index":1916},{"krate":0,"index":1918},{"krate":0,"index":1920},{"krate":0,"index":1922},{"krate":0,"index":1924},{"krate":0,"index":1926},{"krate":0,"index":1928},{"krate":0,"index":1930},{"krate":0,"index":1932}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":23970,"byte_end":23981,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"ToPrimitive","qualname":"::cast::ToPrimitive","value":"ToPrimitive","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134}],"decl_id":null,"docs":" A generic trait for converting a value to a number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":24140,"byte_end":24148,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"to_isize","qualname":"::cast::ToPrimitive::to_isize","value":"fn (&self) -> Option<isize>","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `isize`. If the value cannot be\n represented by an `isize`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":24123,"byte_end":24132,"line_start":15,"line_end":15,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":24395,"byte_end":24400,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"to_i8","qualname":"::cast::ToPrimitive::to_i8","value":"fn (&self) -> Option<i8>","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i8`. If the value cannot be\n represented by an `i8`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":24378,"byte_end":24387,"line_start":22,"line_end":22,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":24643,"byte_end":24649,"line_start":30,"line_end":30,"column_start":8,"column_end":14},"name":"to_i16","qualname":"::cast::ToPrimitive::to_i16","value":"fn (&self) -> Option<i16>","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i16`. If the value cannot be\n represented by an `i16`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":24626,"byte_end":24635,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":24894,"byte_end":24900,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"to_i32","qualname":"::cast::ToPrimitive::to_i32","value":"fn (&self) -> Option<i32>","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i32`. If the value cannot be\n represented by an `i32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":24877,"byte_end":24886,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":25131,"byte_end":25137,"line_start":43,"line_end":43,"column_start":8,"column_end":14},"name":"to_i64","qualname":"::cast::ToPrimitive::to_i64","value":"fn (&self) -> Option<i64>","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i64`. If the value cannot be\n represented by an `i64`, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":25654,"byte_end":25661,"line_start":55,"line_end":55,"column_start":8,"column_end":15},"name":"to_i128","qualname":"::cast::ToPrimitive::to_i128","value":"fn (&self) -> Option<i128>","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i128`. If the value cannot be\n represented by an `i128` (`i64` under the default implementation), then\n `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":25616,"byte_end":25625,"line_start":53,"line_end":53,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":25630,"byte_end":25646,"line_start":54,"line_end":54,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":25886,"byte_end":25894,"line_start":62,"line_end":62,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::cast::ToPrimitive::to_usize","value":"fn (&self) -> Option<usize>","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `usize`. If the value cannot be\n represented by a `usize`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":25869,"byte_end":25878,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":26139,"byte_end":26144,"line_start":69,"line_end":69,"column_start":8,"column_end":13},"name":"to_u8","qualname":"::cast::ToPrimitive::to_u8","value":"fn (&self) -> Option<u8>","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u8`. If the value cannot be\n represented by a `u8`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":26122,"byte_end":26131,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":26385,"byte_end":26391,"line_start":76,"line_end":76,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::cast::ToPrimitive::to_u16","value":"fn (&self) -> Option<u16>","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u16`. If the value cannot be\n represented by a `u16`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":26368,"byte_end":26377,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":26634,"byte_end":26640,"line_start":83,"line_end":83,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::cast::ToPrimitive::to_u32","value":"fn (&self) -> Option<u32>","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u32`. If the value cannot be\n represented by a `u32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":26617,"byte_end":26626,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":26869,"byte_end":26875,"line_start":89,"line_end":89,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::cast::ToPrimitive::to_u64","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u64`. If the value cannot be\n represented by a `u64`, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":27391,"byte_end":27398,"line_start":101,"line_end":101,"column_start":8,"column_end":15},"name":"to_u128","qualname":"::cast::ToPrimitive::to_u128","value":"fn (&self) -> Option<u128>","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u128`. If the value cannot be\n represented by a `u128` (`u64` under the default implementation), then\n `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":27353,"byte_end":27362,"line_start":99,"line_end":99,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":27367,"byte_end":27383,"line_start":100,"line_end":100,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":27621,"byte_end":27627,"line_start":108,"line_end":108,"column_start":8,"column_end":14},"name":"to_f32","qualname":"::cast::ToPrimitive::to_f32","value":"fn (&self) -> Option<f32>","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f32`. If the value cannot be\n represented by an `f32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":27604,"byte_end":27613,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":27872,"byte_end":27878,"line_start":115,"line_end":115,"column_start":8,"column_end":14},"name":"to_f64","qualname":"::cast::ToPrimitive::to_f64","value":"fn (&self) -> Option<f64>","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f64`. If the value cannot be\n represented by an `f64`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":27855,"byte_end":27864,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":36276,"byte_end":36289,"line_start":379,"line_end":379,"column_start":11,"column_end":24},"name":"FromPrimitive","qualname":"::cast::FromPrimitive","value":"FromPrimitive: Sized","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159}],"decl_id":null,"docs":" A generic trait for converting a number to a value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":36472,"byte_end":36482,"line_start":383,"line_end":383,"column_start":8,"column_end":18},"name":"from_isize","qualname":"::cast::FromPrimitive::from_isize","value":"fn (n: isize) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts an `isize` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":36455,"byte_end":36464,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":36741,"byte_end":36748,"line_start":390,"line_end":390,"column_start":8,"column_end":15},"name":"from_i8","qualname":"::cast::FromPrimitive::from_i8","value":"fn (n: i8) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts an `i8` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":36724,"byte_end":36733,"line_start":389,"line_end":389,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":36999,"byte_end":37007,"line_start":397,"line_end":397,"column_start":8,"column_end":16},"name":"from_i16","qualname":"::cast::FromPrimitive::from_i16","value":"fn (n: i16) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts an `i16` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":36982,"byte_end":36991,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":37259,"byte_end":37267,"line_start":404,"line_end":404,"column_start":8,"column_end":16},"name":"from_i32","qualname":"::cast::FromPrimitive::from_i32","value":"fn (n: i32) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts an `i32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":37242,"byte_end":37251,"line_start":403,"line_end":403,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":37505,"byte_end":37513,"line_start":410,"line_end":410,"column_start":8,"column_end":16},"name":"from_i64","qualname":"::cast::FromPrimitive::from_i64","value":"fn (n: i64) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts an `i64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":38003,"byte_end":38012,"line_start":421,"line_end":421,"column_start":8,"column_end":17},"name":"from_i128","qualname":"::cast::FromPrimitive::from_i128","value":"fn (n: i128) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts an `i128` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":37965,"byte_end":37974,"line_start":419,"line_end":419,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":37979,"byte_end":37995,"line_start":420,"line_end":420,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":38272,"byte_end":38282,"line_start":428,"line_end":428,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::cast::FromPrimitive::from_usize","value":"fn (n: usize) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts a `usize` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":38255,"byte_end":38264,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":38541,"byte_end":38548,"line_start":435,"line_end":435,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::cast::FromPrimitive::from_u8","value":"fn (n: u8) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts an `u8` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":38524,"byte_end":38533,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":38799,"byte_end":38807,"line_start":442,"line_end":442,"column_start":8,"column_end":16},"name":"from_u16","qualname":"::cast::FromPrimitive::from_u16","value":"fn (n: u16) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts an `u16` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":38782,"byte_end":38791,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":39059,"byte_end":39067,"line_start":449,"line_end":449,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::cast::FromPrimitive::from_u32","value":"fn (n: u32) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts an `u32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":39042,"byte_end":39051,"line_start":448,"line_end":448,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":39305,"byte_end":39313,"line_start":455,"line_end":455,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::cast::FromPrimitive::from_u64","value":"fn (n: u64) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts an `u64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":39803,"byte_end":39812,"line_start":466,"line_end":466,"column_start":8,"column_end":17},"name":"from_u128","qualname":"::cast::FromPrimitive::from_u128","value":"fn (n: u128) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts an `u128` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":39765,"byte_end":39774,"line_start":464,"line_end":464,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":39779,"byte_end":39795,"line_start":465,"line_end":465,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":40070,"byte_end":40078,"line_start":473,"line_end":473,"column_start":8,"column_end":16},"name":"from_f32","qualname":"::cast::FromPrimitive::from_f32","value":"fn (n: f32) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts a `f32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":40053,"byte_end":40062,"line_start":472,"line_end":472,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":40329,"byte_end":40337,"line_start":480,"line_end":480,"column_start":8,"column_end":16},"name":"from_f64","qualname":"::cast::FromPrimitive::from_f64","value":"fn (n: f64) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts a `f64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":40312,"byte_end":40321,"line_start":479,"line_end":479,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":44583,"byte_end":44587,"line_start":650,"line_end":650,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast::cast","value":"fn <T, U> (n: T) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one machine scalar to another.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":44566,"byte_end":44575,"line_start":649,"line_end":649,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":44721,"byte_end":44728,"line_start":655,"line_end":655,"column_start":11,"column_end":18},"name":"NumCast","qualname":"::cast::NumCast","value":"NumCast: Sized + ToPrimitive","parent":null,"children":[{"krate":0,"index":171}],"decl_id":null,"docs":" An interface for casting between machine scalars.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":44974,"byte_end":44978,"line_start":659,"line_end":659,"column_start":8,"column_end":12},"name":"from","qualname":"::cast::NumCast::from","value":"fn <T> (n: T) -> Option<Self>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Creates a number from another value that can be converted into\n a primitive via the `ToPrimitive` trait. If the source value cannot be\n represented by the target type, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":47114,"byte_end":47125,"line_start":734,"line_end":734,"column_start":11,"column_end":22},"name":"AsPrimitive","qualname":"::cast::AsPrimitive","value":"AsPrimitive<T>: 'static + Copy","parent":null,"children":[{"krate":0,"index":180}],"decl_id":null,"docs":" A generic interface for casting between machine scalars with the\n `as` operator, which admits narrowing and precision loss.\n Implementers of this trait `AsPrimitive` should behave like a primitive\n numeric type (e.g. a newtype around another primitive), and the\n intended conversion must never fail.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":47244,"byte_end":47247,"line_start":739,"line_end":739,"column_start":8,"column_end":11},"name":"as_","qualname":"::cast::AsPrimitive::as_","value":"fn (self) -> T","parent":{"krate":0,"index":178},"children":[],"decl_id":null,"docs":" Convert a value to another, using the `as` operator.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"float","qualname":"::float","value":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":194},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":1990},{"krate":0,"index":2048},{"krate":0,"index":289},{"krate":0,"index":2106},{"krate":0,"index":2124},{"krate":0,"index":2142}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":48968,"byte_end":48977,"line_start":16,"line_end":16,"column_start":11,"column_end":20},"name":"FloatCore","qualname":"::float::FloatCore","value":"FloatCore: Num + NumCast + Neg<Output = Self> + PartialOrd + Copy","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223}],"decl_id":null,"docs":" Generic trait for floating point numbers that works with `no_std`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":49374,"byte_end":49382,"line_start":32,"line_end":32,"column_start":8,"column_end":16},"name":"infinity","qualname":"::float::FloatCore::infinity","value":"fn () -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns positive infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":49745,"byte_end":49757,"line_start":49,"line_end":49,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::float::FloatCore::neg_infinity","value":"fn () -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns negative infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":50067,"byte_end":50070,"line_start":66,"line_end":66,"column_start":8,"column_end":11},"name":"nan","qualname":"::float::FloatCore::nan","value":"fn () -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns NaN.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":50486,"byte_end":50494,"line_start":85,"line_end":85,"column_start":8,"column_end":16},"name":"neg_zero","qualname":"::float::FloatCore::neg_zero","value":"fn () -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns `-0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":50873,"byte_end":50882,"line_start":102,"line_end":102,"column_start":8,"column_end":17},"name":"min_value","qualname":"::float::FloatCore::min_value","value":"fn () -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":51302,"byte_end":51320,"line_start":119,"line_end":119,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::float::FloatCore::min_positive_value","value":"fn () -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":51682,"byte_end":51689,"line_start":136,"line_end":136,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::float::FloatCore::epsilon","value":"fn () -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":52067,"byte_end":52076,"line_start":153,"line_end":153,"column_start":8,"column_end":17},"name":"max_value","qualname":"::float::FloatCore::max_value","value":"fn () -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":52526,"byte_end":52532,"line_start":173,"line_end":173,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::float::FloatCore::is_nan","value":"fn (self) -> bool","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns `true` if the number is NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":52509,"byte_end":52518,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":53109,"byte_end":53120,"line_start":197,"line_end":197,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::float::FloatCore::is_infinite","value":"fn (self) -> bool","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns `true` if the number is infinite.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":53092,"byte_end":53101,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":53721,"byte_end":53730,"line_start":220,"line_end":220,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::float::FloatCore::is_finite","value":"fn (self) -> bool","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither infinite or NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":53704,"byte_end":53713,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":54328,"byte_end":54337,"line_start":243,"line_end":243,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::float::FloatCore::is_normal","value":"fn (self) -> bool","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal or NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":54311,"byte_end":54320,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":55176,"byte_end":55184,"line_start":269,"line_end":269,"column_start":8,"column_end":16},"name":"classify","qualname":"::float::FloatCore::classify","value":"fn (self) -> FpCategory","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":55817,"byte_end":55822,"line_start":294,"line_end":294,"column_start":8,"column_end":13},"name":"floor","qualname":"::float::FloatCore::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":55800,"byte_end":55809,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":56668,"byte_end":56672,"line_start":328,"line_end":328,"column_start":8,"column_end":12},"name":"ceil","qualname":"::float::FloatCore::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":56651,"byte_end":56660,"line_start":327,"line_end":327,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":57504,"byte_end":57509,"line_start":361,"line_end":361,"column_start":8,"column_end":13},"name":"round","qualname":"::float::FloatCore::round","value":"fn (self) -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from `0.0`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":57487,"byte_end":57496,"line_start":360,"line_end":360,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":58600,"byte_end":58605,"line_start":405,"line_end":405,"column_start":8,"column_end":13},"name":"trunc","qualname":"::float::FloatCore::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":58583,"byte_end":58592,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":59326,"byte_end":59331,"line_start":437,"line_end":437,"column_start":8,"column_end":13},"name":"fract","qualname":"::float::FloatCore::fract","value":"fn (self) -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":59309,"byte_end":59318,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":60036,"byte_end":60039,"line_start":466,"line_end":466,"column_start":8,"column_end":11},"name":"abs","qualname":"::float::FloatCore::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `FloatCore::nan()` if the\n number is `FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":60019,"byte_end":60028,"line_start":465,"line_end":465,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":60963,"byte_end":60969,"line_start":500,"line_end":500,"column_start":8,"column_end":14},"name":"signum","qualname":"::float::FloatCore::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":60946,"byte_end":60955,"line_start":499,"line_end":499,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":61831,"byte_end":61847,"line_start":533,"line_end":533,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::float::FloatCore::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0` and\n `FloatCore::infinity()`, and since Rust 1.20 also\n `FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":61814,"byte_end":61823,"line_start":532,"line_end":532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":62577,"byte_end":62593,"line_start":560,"line_end":560,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::float::FloatCore::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0` and\n `FloatCore::neg_infinity()`, and since Rust 1.20 also\n `-FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":62560,"byte_end":62569,"line_start":559,"line_end":559,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":63226,"byte_end":63229,"line_start":585,"line_end":585,"column_start":8,"column_end":11},"name":"min","qualname":"::float::FloatCore::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":63209,"byte_end":63218,"line_start":584,"line_end":584,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":64026,"byte_end":64029,"line_start":619,"line_end":619,"column_start":8,"column_end":11},"name":"max","qualname":"::float::FloatCore::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":64009,"byte_end":64018,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":64784,"byte_end":64789,"line_start":652,"line_end":652,"column_start":8,"column_end":13},"name":"recip","qualname":"::float::FloatCore::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns the reciprocal (multiplicative inverse) of the number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":64767,"byte_end":64776,"line_start":651,"line_end":651,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":65383,"byte_end":65387,"line_start":676,"line_end":676,"column_start":8,"column_end":12},"name":"powi","qualname":"::float::FloatCore::powi","value":"fn (mut self, mut exp: i32) -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":65366,"byte_end":65375,"line_start":675,"line_end":675,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":66304,"byte_end":66314,"line_start":704,"line_end":704,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::float::FloatCore::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Converts to degrees, assuming the number is in radians.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":66810,"byte_end":66820,"line_start":723,"line_end":723,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::float::FloatCore::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Converts to radians, assuming the number is in degrees.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":67579,"byte_end":67593,"line_start":746,"line_end":746,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::float::FloatCore::integer_decode","value":"fn (self) -> (u64, i16, i8)","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":72656,"byte_end":72661,"line_start":905,"line_end":905,"column_start":11,"column_end":16},"name":"Float","qualname":"::float::Float","value":"Float: Num + Copy + NumCast + PartialOrd + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285}],"decl_id":null,"docs":" Generic trait for floating point numbers","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", feature = \"libm\"))","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":72599,"byte_end":72645,"line_start":904,"line_end":904,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":72907,"byte_end":72910,"line_start":915,"line_end":915,"column_start":8,"column_end":11},"name":"nan","qualname":"::float::Float::nan","value":"fn () -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the `NaN` value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":73232,"byte_end":73240,"line_start":928,"line_end":928,"column_start":8,"column_end":16},"name":"infinity","qualname":"::float::Float::infinity","value":"fn () -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the infinite value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":73591,"byte_end":73603,"line_start":941,"line_end":941,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::float::Float::neg_infinity","value":"fn () -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the negative infinite value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":73973,"byte_end":73981,"line_start":955,"line_end":955,"column_start":8,"column_end":16},"name":"neg_zero","qualname":"::float::Float::neg_zero","value":"fn () -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns `-0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":74248,"byte_end":74257,"line_start":967,"line_end":967,"column_start":8,"column_end":17},"name":"min_value","qualname":"::float::Float::min_value","value":"fn () -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":74556,"byte_end":74574,"line_start":979,"line_end":979,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::float::Float::min_positive_value","value":"fn () -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":74951,"byte_end":74958,"line_start":996,"line_end":996,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::float::Float::epsilon","value":"fn () -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":75299,"byte_end":75308,"line_start":1009,"line_end":1009,"column_start":8,"column_end":17},"name":"max_value","qualname":"::float::Float::max_value","value":"fn () -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":75606,"byte_end":75612,"line_start":1023,"line_end":1023,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::float::Float::is_nan","value":"fn (self) -> bool","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns `true` if this value is `NaN` and false otherwise.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":76150,"byte_end":76161,"line_start":1043,"line_end":1043,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::float::Float::is_infinite","value":"fn (self) -> bool","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns `true` if this value is positive infinity or negative infinity and\n false otherwise.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":76653,"byte_end":76662,"line_start":1062,"line_end":1062,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::float::Float::is_finite","value":"fn (self) -> bool","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor `NaN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":77412,"byte_end":77421,"line_start":1086,"line_end":1086,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::float::Float::is_normal","value":"fn (self) -> bool","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite,\n [subnormal][subnormal], or `NaN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":77935,"byte_end":77943,"line_start":1103,"line_end":1103,"column_start":8,"column_end":16},"name":"classify","qualname":"::float::Float::classify","value":"fn (self) -> FpCategory","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":78235,"byte_end":78240,"line_start":1116,"line_end":1116,"column_start":8,"column_end":13},"name":"floor","qualname":"::float::Float::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":78528,"byte_end":78532,"line_start":1129,"line_end":1129,"column_start":8,"column_end":12},"name":"ceil","qualname":"::float::Float::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":78846,"byte_end":78851,"line_start":1143,"line_end":1143,"column_start":8,"column_end":13},"name":"round","qualname":"::float::Float::round","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from\n `0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":79115,"byte_end":79120,"line_start":1156,"line_end":1156,"column_start":8,"column_end":13},"name":"trunc","qualname":"::float::Float::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":79516,"byte_end":79521,"line_start":1171,"line_end":1171,"column_start":8,"column_end":13},"name":"fract","qualname":"::float::Float::fract","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":80051,"byte_end":80054,"line_start":1191,"line_end":1191,"column_start":8,"column_end":11},"name":"abs","qualname":"::float::Float::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `Float::nan()` if the\n number is `Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":80621,"byte_end":80627,"line_start":1210,"line_end":1210,"column_start":8,"column_end":14},"name":"signum","qualname":"::float::Float::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":81100,"byte_end":81116,"line_start":1228,"line_end":1228,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::float::Float::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0`,\n `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":81585,"byte_end":81601,"line_start":1246,"line_end":1246,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::float::Float::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0`,\n `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":82213,"byte_end":82220,"line_start":1266,"line_end":1266,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::float::Float::mul_add","value":"fn (self, a: Self, b: Self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":82518,"byte_end":82523,"line_start":1277,"line_end":1277,"column_start":8,"column_end":13},"name":"recip","qualname":"::float::Float::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Take the reciprocal (inverse) of a number, `1/x`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":82860,"byte_end":82864,"line_start":1291,"line_end":1291,"column_start":8,"column_end":12},"name":"powi","qualname":"::float::Float::powi","value":"fn (self, n: i32) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":83143,"byte_end":83147,"line_start":1303,"line_end":1303,"column_start":8,"column_end":12},"name":"powf","qualname":"::float::Float::powf","value":"fn (self, n: Self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Raise a number to a floating point power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":83570,"byte_end":83574,"line_start":1320,"line_end":1320,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::float::Float::sqrt","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Take the square root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":83924,"byte_end":83927,"line_start":1336,"line_end":1336,"column_start":8,"column_end":11},"name":"exp","qualname":"::float::Float::exp","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns `e^(self)`, (the exponential function).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":84205,"byte_end":84209,"line_start":1350,"line_end":1350,"column_start":8,"column_end":12},"name":"exp2","qualname":"::float::Float::exp2","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns `2^(self)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":84556,"byte_end":84558,"line_start":1366,"line_end":1366,"column_start":8,"column_end":10},"name":"ln","qualname":"::float::Float::ln","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the natural logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":85068,"byte_end":85071,"line_start":1385,"line_end":1385,"column_start":8,"column_end":11},"name":"log","qualname":"::float::Float::log","value":"fn (self, base: Self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the logarithm of the number with respect to an arbitrary base.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":85393,"byte_end":85397,"line_start":1399,"line_end":1399,"column_start":8,"column_end":12},"name":"log2","qualname":"::float::Float::log2","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the base 2 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":85712,"byte_end":85717,"line_start":1413,"line_end":1413,"column_start":8,"column_end":13},"name":"log10","qualname":"::float::Float::log10","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the base 10 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":86016,"byte_end":86026,"line_start":1427,"line_end":1427,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::float::Float::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Converts radians to degrees.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":85999,"byte_end":86008,"line_start":1426,"line_end":1426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":86457,"byte_end":86467,"line_start":1445,"line_end":1445,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::float::Float::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Converts degrees to radians.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":86440,"byte_end":86449,"line_start":1444,"line_end":1444,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":86821,"byte_end":86824,"line_start":1461,"line_end":1461,"column_start":8,"column_end":11},"name":"max","qualname":"::float::Float::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":87063,"byte_end":87066,"line_start":1473,"line_end":1473,"column_start":8,"column_end":11},"name":"min","qualname":"::float::Float::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":87564,"byte_end":87571,"line_start":1492,"line_end":1492,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::float::Float::abs_sub","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":87879,"byte_end":87883,"line_start":1506,"line_end":1506,"column_start":8,"column_end":12},"name":"cbrt","qualname":"::float::Float::cbrt","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Take the cubic root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":88301,"byte_end":88306,"line_start":1522,"line_end":1522,"column_start":8,"column_end":13},"name":"hypot","qualname":"::float::Float::hypot","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Calculate the length of the hypotenuse of a right-angle triangle given\n legs of length `x` and `y`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":88634,"byte_end":88637,"line_start":1536,"line_end":1536,"column_start":8,"column_end":11},"name":"sin","qualname":"::float::Float::sin","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Computes the sine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":88954,"byte_end":88957,"line_start":1550,"line_end":1550,"column_start":8,"column_end":11},"name":"cos","qualname":"::float::Float::cos","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Computes the cosine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":89267,"byte_end":89270,"line_start":1563,"line_end":1563,"column_start":8,"column_end":11},"name":"tan","qualname":"::float::Float::tan","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Computes the tangent of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":89750,"byte_end":89754,"line_start":1580,"line_end":1580,"column_start":8,"column_end":12},"name":"asin","qualname":"::float::Float::asin","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Computes the arcsine of a number. Return value is in radians in\n the range [-pi/2, pi/2] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":90230,"byte_end":90234,"line_start":1597,"line_end":1597,"column_start":8,"column_end":12},"name":"acos","qualname":"::float::Float::acos","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Computes the arccosine of a number. Return value is in radians in\n the range [0, pi] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":90598,"byte_end":90602,"line_start":1612,"line_end":1612,"column_start":8,"column_end":12},"name":"atan","qualname":"::float::Float::atan","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Computes the arctangent of a number. Return value is in radians in the\n range [-pi/2, pi/2];","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":91483,"byte_end":91488,"line_start":1641,"line_end":1641,"column_start":8,"column_end":13},"name":"atan2","qualname":"::float::Float::atan2","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":92002,"byte_end":92009,"line_start":1659,"line_end":1659,"column_start":8,"column_end":15},"name":"sin_cos","qualname":"::float::Float::sin_cos","value":"fn (self) -> (Self, Self)","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Simultaneously computes the sine and cosine of the number, `x`. Returns\n `(sin(x), cos(x))`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":92377,"byte_end":92383,"line_start":1674,"line_end":1674,"column_start":8,"column_end":14},"name":"exp_m1","qualname":"::float::Float::exp_m1","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns `e^(self) - 1` in a way that is accurate even if the\n number is close to zero.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":92810,"byte_end":92815,"line_start":1690,"line_end":1690,"column_start":8,"column_end":13},"name":"ln_1p","qualname":"::float::Float::ln_1p","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns `ln(1+n)` (natural logarithm) more accurately than if\n the operations were performed separately.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":93235,"byte_end":93239,"line_start":1708,"line_end":1708,"column_start":8,"column_end":12},"name":"sinh","qualname":"::float::Float::sinh","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":93675,"byte_end":93679,"line_start":1726,"line_end":1726,"column_start":8,"column_end":12},"name":"cosh","qualname":"::float::Float::cosh","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":94135,"byte_end":94139,"line_start":1744,"line_end":1744,"column_start":8,"column_end":12},"name":"tanh","qualname":"::float::Float::tanh","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":94434,"byte_end":94439,"line_start":1758,"line_end":1758,"column_start":8,"column_end":13},"name":"asinh","qualname":"::float::Float::asinh","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Inverse hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":94736,"byte_end":94741,"line_start":1772,"line_end":1772,"column_start":8,"column_end":13},"name":"acosh","qualname":"::float::Float::acosh","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Inverse hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":95072,"byte_end":95077,"line_start":1787,"line_end":1787,"column_start":8,"column_end":13},"name":"atanh","qualname":"::float::Float::atanh","value":"fn (self) -> Self","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Inverse hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":95769,"byte_end":95783,"line_start":1808,"line_end":1808,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::float::Float::integer_decode","value":"fn (self) -> (u64, i16, i8)","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2107},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":107733,"byte_end":107734,"line_start":2271,"line_end":2271,"column_start":5,"column_end":6},"name":"E","qualname":"::float::FloatConst::E","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return Euler’s number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2108},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":107774,"byte_end":107783,"line_start":2273,"line_end":2273,"column_start":5,"column_end":14},"name":"FRAC_1_PI","qualname":"::float::FloatConst::FRAC_1_PI","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return `1.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2109},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":107830,"byte_end":107843,"line_start":2275,"line_end":2275,"column_start":5,"column_end":18},"name":"FRAC_1_SQRT_2","qualname":"::float::FloatConst::FRAC_1_SQRT_2","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return `1.0 / sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2110},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":107883,"byte_end":107892,"line_start":2277,"line_end":2277,"column_start":5,"column_end":14},"name":"FRAC_2_PI","qualname":"::float::FloatConst::FRAC_2_PI","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return `2.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2111},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":107938,"byte_end":107952,"line_start":2279,"line_end":2279,"column_start":5,"column_end":19},"name":"FRAC_2_SQRT_PI","qualname":"::float::FloatConst::FRAC_2_SQRT_PI","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return `2.0 / sqrt(π)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":107992,"byte_end":108001,"line_start":2281,"line_end":2281,"column_start":5,"column_end":14},"name":"FRAC_PI_2","qualname":"::float::FloatConst::FRAC_PI_2","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return `π / 2.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2113},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":108041,"byte_end":108050,"line_start":2283,"line_end":2283,"column_start":5,"column_end":14},"name":"FRAC_PI_3","qualname":"::float::FloatConst::FRAC_PI_3","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return `π / 3.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2114},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":108090,"byte_end":108099,"line_start":2285,"line_end":2285,"column_start":5,"column_end":14},"name":"FRAC_PI_4","qualname":"::float::FloatConst::FRAC_PI_4","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return `π / 4.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2115},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":108139,"byte_end":108148,"line_start":2287,"line_end":2287,"column_start":5,"column_end":14},"name":"FRAC_PI_6","qualname":"::float::FloatConst::FRAC_PI_6","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return `π / 6.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2116},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":108188,"byte_end":108197,"line_start":2289,"line_end":2289,"column_start":5,"column_end":14},"name":"FRAC_PI_8","qualname":"::float::FloatConst::FRAC_PI_8","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return `π / 8.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2117},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":108237,"byte_end":108242,"line_start":2291,"line_end":2291,"column_start":5,"column_end":10},"name":"LN_10","qualname":"::float::FloatConst::LN_10","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return `ln(10.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2118},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":108281,"byte_end":108285,"line_start":2293,"line_end":2293,"column_start":5,"column_end":9},"name":"LN_2","qualname":"::float::FloatConst::LN_2","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return `ln(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":108325,"byte_end":108332,"line_start":2295,"line_end":2295,"column_start":5,"column_end":12},"name":"LOG10_E","qualname":"::float::FloatConst::LOG10_E","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return `log10(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":108371,"byte_end":108377,"line_start":2297,"line_end":2297,"column_start":5,"column_end":11},"name":"LOG2_E","qualname":"::float::FloatConst::LOG2_E","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return `log2(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":108434,"byte_end":108436,"line_start":2299,"line_end":2299,"column_start":5,"column_end":7},"name":"PI","qualname":"::float::FloatConst::PI","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return Archimedes’ constant `π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2122},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":108477,"byte_end":108483,"line_start":2301,"line_end":2301,"column_start":5,"column_end":11},"name":"SQRT_2","qualname":"::float::FloatConst::SQRT_2","value":"fn () -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"Return `sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"identities","qualname":"::identities","value":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":295},{"krate":0,"index":299},{"krate":0,"index":2160},{"krate":0,"index":2163},{"krate":0,"index":2166},{"krate":0,"index":2169},{"krate":0,"index":2172},{"krate":0,"index":2175},{"krate":0,"index":2178},{"krate":0,"index":2181},{"krate":0,"index":2184},{"krate":0,"index":2187},{"krate":0,"index":2190},{"krate":0,"index":2193},{"krate":0,"index":2196},{"krate":0,"index":2199},{"krate":0,"index":300},{"krate":0,"index":305},{"krate":0,"index":309},{"krate":0,"index":2202},{"krate":0,"index":2205},{"krate":0,"index":2208},{"krate":0,"index":2211},{"krate":0,"index":2214},{"krate":0,"index":2217},{"krate":0,"index":2220},{"krate":0,"index":2223},{"krate":0,"index":2226},{"krate":0,"index":2229},{"krate":0,"index":2232},{"krate":0,"index":2235},{"krate":0,"index":2238},{"krate":0,"index":2241},{"krate":0,"index":310},{"krate":0,"index":314},{"krate":0,"index":316}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":110390,"byte_end":110394,"line_start":12,"line_end":12,"column_start":11,"column_end":15},"name":"Zero","qualname":"::identities::Zero","value":"Zero: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298}],"decl_id":null,"docs":" Defines an additive identity element for `Self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":110764,"byte_end":110768,"line_start":20,"line_end":20,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::Zero::zero","value":"fn () -> Self","parent":{"krate":0,"index":295},"children":[],"decl_id":null,"docs":" Returns the additive identity element of `Self`, `0`.\n # Purity","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":110857,"byte_end":110865,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"set_zero","qualname":"::identities::Zero::set_zero","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":295},"children":[],"decl_id":null,"docs":" Sets `self` to the additive identity element of `Self`, `0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":110991,"byte_end":110998,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::identities::Zero::is_zero","value":"fn (&self) -> bool","parent":{"krate":0,"index":295},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the additive identity.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":112085,"byte_end":112088,"line_start":90,"line_end":90,"column_start":11,"column_end":14},"name":"One","qualname":"::identities::One","value":"One: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308}],"decl_id":null,"docs":" Defines a multiplicative identity element for `Self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":112472,"byte_end":112475,"line_start":99,"line_end":99,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::One::one","value":"fn () -> Self","parent":{"krate":0,"index":305},"children":[],"decl_id":null,"docs":" Returns the multiplicative identity element of `Self`, `1`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":112570,"byte_end":112577,"line_start":102,"line_end":102,"column_start":8,"column_end":15},"name":"set_one","qualname":"::identities::One::set_one","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":305},"children":[],"decl_id":null,"docs":" Sets `self` to the multiplicative identity element of `Self`, `1`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":112922,"byte_end":112928,"line_start":112,"line_end":112,"column_start":8,"column_end":14},"name":"is_one","qualname":"::identities::One::is_one","value":"fn (&self) -> bool","parent":{"krate":0,"index":305},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the multiplicative identity.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":112905,"byte_end":112914,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":113951,"byte_end":113955,"line_start":171,"line_end":171,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::zero","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the additive identity, `0`.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":113926,"byte_end":113943,"line_start":170,"line_end":170,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":114065,"byte_end":114068,"line_start":177,"line_end":177,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::one","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplicative identity, `1`.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":114040,"byte_end":114057,"line_start":176,"line_end":176,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"int","qualname":"::int","value":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":332},{"krate":0,"index":349},{"krate":0,"index":2244},{"krate":0,"index":2261},{"krate":0,"index":2278},{"krate":0,"index":2295},{"krate":0,"index":2312},{"krate":0,"index":2329},{"krate":0,"index":2346},{"krate":0,"index":2363},{"krate":0,"index":2380},{"krate":0,"index":2397},{"krate":0,"index":2414},{"krate":0,"index":2431}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116640,"byte_end":116647,"line_start":34,"line_end":34,"column_start":11,"column_end":18},"name":"PrimInt","qualname":"::int::PrimInt","value":"PrimInt: Sized + Copy + Num + NumCast + Bounded + PartialOrd + Ord + Eq + Not<Output =\nSelf> + BitAnd<Output = Self> + BitOr<Output = Self> + BitXor<Output = Self> +\nShl<usize, Output = Self> + Shr<usize, Output = Self> + CheckedAdd<Output =\nSelf> + CheckedSub<Output = Self> + CheckedMul<Output = Self> +\nCheckedDiv<Output = Self> + Saturating","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348}],"decl_id":null,"docs":" Generic trait for primitive integers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":117322,"byte_end":117332,"line_start":66,"line_end":66,"column_start":8,"column_end":18},"name":"count_ones","qualname":"::int::PrimInt::count_ones","value":"fn (self) -> u32","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Returns the number of ones in the binary representation of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":117609,"byte_end":117620,"line_start":79,"line_end":79,"column_start":8,"column_end":19},"name":"count_zeros","qualname":"::int::PrimInt::count_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Returns the number of zeros in the binary representation of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":117916,"byte_end":117929,"line_start":93,"line_end":93,"column_start":8,"column_end":21},"name":"leading_zeros","qualname":"::int::PrimInt::leading_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation\n of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":118226,"byte_end":118240,"line_start":107,"line_end":107,"column_start":8,"column_end":22},"name":"trailing_zeros","qualname":"::int::PrimInt::trailing_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Returns the number of trailing zeros in the binary representation\n of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":118635,"byte_end":118646,"line_start":122,"line_end":122,"column_start":8,"column_end":19},"name":"rotate_left","qualname":"::int::PrimInt::rotate_left","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, wrapping\n the truncated bits to the end of the resulting integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":119058,"byte_end":119070,"line_start":137,"line_end":137,"column_start":8,"column_end":20},"name":"rotate_right","qualname":"::int::PrimInt::rotate_right","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, wrapping\n the truncated bits to the beginning of the resulting integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":119513,"byte_end":119523,"line_start":154,"line_end":154,"column_start":8,"column_end":18},"name":"signed_shl","qualname":"::int::PrimInt::signed_shl","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":119999,"byte_end":120009,"line_start":171,"line_end":171,"column_start":8,"column_end":18},"name":"signed_shr","qualname":"::int::PrimInt::signed_shr","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, copying\n the \"sign bit\" in the most significant bits even for unsigned types.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":120456,"byte_end":120468,"line_start":188,"line_end":188,"column_start":8,"column_end":20},"name":"unsigned_shl","qualname":"::int::PrimInt::unsigned_shl","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":120908,"byte_end":120920,"line_start":205,"line_end":205,"column_start":8,"column_end":20},"name":"unsigned_shr","qualname":"::int::PrimInt::unsigned_shr","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, filling\n zeros in the most significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":121225,"byte_end":121235,"line_start":219,"line_end":219,"column_start":8,"column_end":18},"name":"swap_bytes","qualname":"::int::PrimInt::swap_bytes","value":"fn (self) -> Self","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Reverses the byte order of the integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":121731,"byte_end":121738,"line_start":238,"line_end":238,"column_start":8,"column_end":15},"name":"from_be","qualname":"::int::PrimInt::from_be","value":"fn (x: Self) -> Self","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Convert an integer from big endian to the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":122243,"byte_end":122250,"line_start":257,"line_end":257,"column_start":8,"column_end":15},"name":"from_le","qualname":"::int::PrimInt::from_le","value":"fn (x: Self) -> Self","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Convert an integer from little endian to the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":122733,"byte_end":122738,"line_start":276,"line_end":276,"column_start":8,"column_end":13},"name":"to_be","qualname":"::int::PrimInt::to_be","value":"fn (self) -> Self","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Convert `self` to big endian from the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":123224,"byte_end":123229,"line_start":295,"line_end":295,"column_start":8,"column_end":13},"name":"to_le","qualname":"::int::PrimInt::to_le","value":"fn (self) -> Self","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Convert `self` to little endian from the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":123467,"byte_end":123470,"line_start":306,"line_end":306,"column_start":8,"column_end":11},"name":"pow","qualname":"::int::PrimInt::pow","value":"fn (self, exp: u32) -> Self","parent":{"krate":0,"index":332},"children":[],"decl_id":null,"docs":" Raises self to the power of `exp`, using exponentiation by squaring.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":350},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\mod.rs","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":379},{"krate":0,"index":397},{"krate":0,"index":419},{"krate":0,"index":424}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":351},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::ops::checked","value":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":2448},{"krate":0,"index":2450},{"krate":0,"index":2452},{"krate":0,"index":2454},{"krate":0,"index":2456},{"krate":0,"index":2458},{"krate":0,"index":2460},{"krate":0,"index":2462},{"krate":0,"index":2464},{"krate":0,"index":2466},{"krate":0,"index":2468},{"krate":0,"index":2470},{"krate":0,"index":363},{"krate":0,"index":2472},{"krate":0,"index":2474},{"krate":0,"index":2476},{"krate":0,"index":2478},{"krate":0,"index":2480},{"krate":0,"index":2482},{"krate":0,"index":2484},{"krate":0,"index":2486},{"krate":0,"index":2488},{"krate":0,"index":2490},{"krate":0,"index":2492},{"krate":0,"index":2494},{"krate":0,"index":365},{"krate":0,"index":2496},{"krate":0,"index":2498},{"krate":0,"index":2500},{"krate":0,"index":2502},{"krate":0,"index":2504},{"krate":0,"index":2506},{"krate":0,"index":2508},{"krate":0,"index":2510},{"krate":0,"index":2512},{"krate":0,"index":2514},{"krate":0,"index":2516},{"krate":0,"index":2518},{"krate":0,"index":367},{"krate":0,"index":2520},{"krate":0,"index":2522},{"krate":0,"index":2524},{"krate":0,"index":2526},{"krate":0,"index":2528},{"krate":0,"index":2530},{"krate":0,"index":2532},{"krate":0,"index":2534},{"krate":0,"index":2536},{"krate":0,"index":2538},{"krate":0,"index":2540},{"krate":0,"index":2542},{"krate":0,"index":369},{"krate":0,"index":2544},{"krate":0,"index":2546},{"krate":0,"index":2548},{"krate":0,"index":2550},{"krate":0,"index":2552},{"krate":0,"index":2554},{"krate":0,"index":2556},{"krate":0,"index":2558},{"krate":0,"index":2560},{"krate":0,"index":2562},{"krate":0,"index":2564},{"krate":0,"index":2566},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":2568},{"krate":0,"index":2570},{"krate":0,"index":2572},{"krate":0,"index":2574},{"krate":0,"index":2576},{"krate":0,"index":2578},{"krate":0,"index":2580},{"krate":0,"index":2582},{"krate":0,"index":2584},{"krate":0,"index":2586},{"krate":0,"index":2588},{"krate":0,"index":2590},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":2592},{"krate":0,"index":2594},{"krate":0,"index":2596},{"krate":0,"index":2598},{"krate":0,"index":2600},{"krate":0,"index":2602},{"krate":0,"index":2604},{"krate":0,"index":2606},{"krate":0,"index":2608},{"krate":0,"index":2610},{"krate":0,"index":2612},{"krate":0,"index":2614},{"krate":0,"index":377},{"krate":0,"index":2616},{"krate":0,"index":2618},{"krate":0,"index":2620},{"krate":0,"index":2622},{"krate":0,"index":2624},{"krate":0,"index":2626},{"krate":0,"index":2628},{"krate":0,"index":2630},{"krate":0,"index":2632},{"krate":0,"index":2634},{"krate":0,"index":2636},{"krate":0,"index":2638}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":126250,"byte_end":126260,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"CheckedAdd","qualname":"::ops::checked::CheckedAdd","value":"CheckedAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":361}],"decl_id":null,"docs":" Performs addition that returns `None` instead of wrapping around on\n overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":126402,"byte_end":126413,"line_start":8,"line_end":8,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::ops::checked::CheckedAdd::checked_add","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Adds two numbers, checking for overflow. If overflow happens, `None` is\n returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":127391,"byte_end":127401,"line_start":39,"line_end":39,"column_start":11,"column_end":21},"name":"CheckedSub","qualname":"::ops::checked::CheckedSub","value":"CheckedSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":364}],"decl_id":null,"docs":" Performs subtraction that returns `None` instead of wrapping around on underflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":127550,"byte_end":127561,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::ops::checked::CheckedSub::checked_sub","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Subtracts two numbers, checking for underflow. If underflow happens,\n `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":128294,"byte_end":128304,"line_start":63,"line_end":63,"column_start":11,"column_end":21},"name":"CheckedMul","qualname":"::ops::checked::CheckedMul","value":"CheckedMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":366}],"decl_id":null,"docs":" Performs multiplication that returns `None` instead of wrapping around on underflow or\n overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":128478,"byte_end":128489,"line_start":66,"line_end":66,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"::ops::checked::CheckedMul::checked_mul","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":365},"children":[],"decl_id":null,"docs":" Multiplies two numbers, checking for underflow or overflow. If underflow\n or overflow happens, `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":129262,"byte_end":129272,"line_start":87,"line_end":87,"column_start":11,"column_end":21},"name":"CheckedDiv","qualname":"::ops::checked::CheckedDiv","value":"CheckedDiv: Sized + Div<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":368}],"decl_id":null,"docs":" Performs division that returns `None` instead of panicking on division by zero and instead of\n wrapping around on underflow and overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":129452,"byte_end":129463,"line_start":90,"line_end":90,"column_start":8,"column_end":19},"name":"checked_div","qualname":"::ops::checked::CheckedDiv::checked_div","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Divides two numbers, checking for underflow, overflow and division by\n zero. If any of that happens, `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":130249,"byte_end":130259,"line_start":111,"line_end":111,"column_start":11,"column_end":21},"name":"CheckedRem","qualname":"::ops::checked::CheckedRem","value":"CheckedRem: Sized + Rem<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":370}],"decl_id":null,"docs":" Performs an integral remainder that returns `None` instead of panicking on division by zero and\n instead of wrapping around on underflow and overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":131053,"byte_end":131064,"line_start":131,"line_end":131,"column_start":8,"column_end":19},"name":"checked_rem","qualname":"::ops::checked::CheckedRem::checked_rem","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Finds the remainder of dividing two numbers, checking for underflow, overflow and division\n by zero. If any of that happens, `None` is returned.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":132028,"byte_end":132038,"line_start":162,"line_end":162,"column_start":11,"column_end":21},"name":"CheckedNeg","qualname":"::ops::checked::CheckedNeg","value":"CheckedNeg: Sized","parent":null,"children":[{"krate":0,"index":373}],"decl_id":null,"docs":" Performs negation that returns `None` if the result can't be represented.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":132688,"byte_end":132699,"line_start":179,"line_end":179,"column_start":8,"column_end":19},"name":"checked_neg","qualname":"::ops::checked::CheckedNeg::checked_neg","value":"fn (&self) -> Option<Self>","parent":{"krate":0,"index":372},"children":[],"decl_id":null,"docs":" Negates a number, returning `None` for results that can't be represented, like signed `MIN`\n values that can't be positive, or non-zero unsigned values that can't be negative.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":133477,"byte_end":133487,"line_start":200,"line_end":200,"column_start":11,"column_end":21},"name":"CheckedShl","qualname":"::ops::checked::CheckedShl","value":"CheckedShl: Sized + Shl<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":375}],"decl_id":null,"docs":" Performs a left shift that returns `None` on shifts larger than\n the type width.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":134046,"byte_end":134057,"line_start":214,"line_end":214,"column_start":8,"column_end":19},"name":"checked_shl","qualname":"::ops::checked::CheckedShl::checked_shl","value":"fn (&self, rhs: u32) -> Option<Self>","parent":{"krate":0,"index":374},"children":[],"decl_id":null,"docs":" Checked shift left. Computes `self << rhs`, returning `None`\n if `rhs` is larger than or equal to the number of bits in `self`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":135119,"byte_end":135129,"line_start":246,"line_end":246,"column_start":11,"column_end":21},"name":"CheckedShr","qualname":"::ops::checked::CheckedShr","value":"CheckedShr: Sized + Shr<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":378}],"decl_id":null,"docs":" Performs a right shift that returns `None` on shifts larger than\n the type width.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":135689,"byte_end":135700,"line_start":260,"line_end":260,"column_start":8,"column_end":19},"name":"checked_shr","qualname":"::ops::checked::CheckedShr::checked_shr","value":"fn (&self, rhs: u32) -> Option<Self>","parent":{"krate":0,"index":377},"children":[],"decl_id":null,"docs":" Checked shift right. Computes `self >> rhs`, returning `None`\n if `rhs` is larger than or equal to the number of bits in `self`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\inv.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inv","qualname":"::ops::inv","value":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\inv.rs","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":383},{"krate":0,"index":386},{"krate":0,"index":389},{"krate":0,"index":393}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\inv.rs","byte_start":136489,"byte_end":136492,"line_start":2,"line_end":2,"column_start":11,"column_end":14},"name":"Inv","qualname":"::ops::inv::Inv","value":"Inv","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382}],"decl_id":null,"docs":" Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\inv.rs","byte_start":136552,"byte_end":136558,"line_start":4,"line_end":4,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::inv::Inv::Output","value":"type Output;","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\inv.rs","byte_start":136837,"byte_end":136840,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"inv","qualname":"::ops::inv::Inv::inv","value":"fn (self) -> Self::Output","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" Returns the multiplicative inverse of `self`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\mul_add.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mul_add","qualname":"::ops::mul_add","value":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\mul_add.rs","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":403},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":2640},{"krate":0,"index":2643},{"krate":0,"index":2646},{"krate":0,"index":2649},{"krate":0,"index":2652},{"krate":0,"index":2655},{"krate":0,"index":2658},{"krate":0,"index":2661},{"krate":0,"index":2664},{"krate":0,"index":2667},{"krate":0,"index":2670},{"krate":0,"index":2673},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":2676},{"krate":0,"index":2678},{"krate":0,"index":2680},{"krate":0,"index":2682},{"krate":0,"index":2684},{"krate":0,"index":2686},{"krate":0,"index":2688},{"krate":0,"index":2690},{"krate":0,"index":2692},{"krate":0,"index":2694},{"krate":0,"index":2696},{"krate":0,"index":2698}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":398},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\mul_add.rs","byte_start":137965,"byte_end":137971,"line_start":23,"line_end":23,"column_start":11,"column_end":17},"name":"MulAdd","qualname":"::ops::mul_add::MulAdd","value":"MulAdd<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402}],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\mul_add.rs","byte_start":138069,"byte_end":138075,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::mul_add::MulAdd::Output","value":"type Output;","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" The resulting type after applying the fused multiply-add.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\mul_add.rs","byte_start":138136,"byte_end":138143,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::ops::mul_add::MulAdd::mul_add","value":"fn (self, a: A, b: B) -> Self::Output","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\mul_add.rs","byte_start":138241,"byte_end":138253,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"MulAddAssign","qualname":"::ops::mul_add::MulAddAssign","value":"MulAddAssign<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":406}],"decl_id":null,"docs":" The fused multiply-add assignment operation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\mul_add.rs","byte_start":138334,"byte_end":138348,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"mul_add_assign","qualname":"::ops::mul_add::MulAddAssign::mul_add_assign","value":"fn (&mut self, a: A, b: B) -> ()","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":419},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\saturating.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"saturating","qualname":"::ops::saturating","value":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\saturating.rs","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":2700},{"krate":0,"index":2703},{"krate":0,"index":2706},{"krate":0,"index":2709},{"krate":0,"index":2712},{"krate":0,"index":2715},{"krate":0,"index":2718},{"krate":0,"index":2721},{"krate":0,"index":2724},{"krate":0,"index":2727},{"krate":0,"index":2730},{"krate":0,"index":2733}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\saturating.rs","byte_start":141284,"byte_end":141294,"line_start":2,"line_end":2,"column_start":11,"column_end":21},"name":"Saturating","qualname":"::ops::saturating::Saturating","value":"Saturating","parent":null,"children":[{"krate":0,"index":421},{"krate":0,"index":422}],"decl_id":null,"docs":" Saturating math operations\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\saturating.rs","byte_start":141420,"byte_end":141434,"line_start":5,"line_end":5,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::ops::saturating::Saturating::saturating_add","value":"fn (self, v: Self) -> Self","parent":{"krate":0,"index":420},"children":[],"decl_id":null,"docs":" Saturating addition operator.\n Returns a+b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\saturating.rs","byte_start":141586,"byte_end":141600,"line_start":9,"line_end":9,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::ops::saturating::Saturating::saturating_sub","value":"fn (self, v: Self) -> Self","parent":{"krate":0,"index":420},"children":[],"decl_id":null,"docs":" Saturating subtraction operator.\n Returns a-b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":424},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wrapping","qualname":"::ops::wrapping","value":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","parent":null,"children":[{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":2736},{"krate":0,"index":2738},{"krate":0,"index":2740},{"krate":0,"index":2742},{"krate":0,"index":2744},{"krate":0,"index":2746},{"krate":0,"index":2748},{"krate":0,"index":2750},{"krate":0,"index":2752},{"krate":0,"index":2754},{"krate":0,"index":2756},{"krate":0,"index":2758},{"krate":0,"index":435},{"krate":0,"index":2760},{"krate":0,"index":2762},{"krate":0,"index":2764},{"krate":0,"index":2766},{"krate":0,"index":2768},{"krate":0,"index":2770},{"krate":0,"index":2772},{"krate":0,"index":2774},{"krate":0,"index":2776},{"krate":0,"index":2778},{"krate":0,"index":2780},{"krate":0,"index":2782},{"krate":0,"index":437},{"krate":0,"index":2784},{"krate":0,"index":2786},{"krate":0,"index":2788},{"krate":0,"index":2790},{"krate":0,"index":2792},{"krate":0,"index":2794},{"krate":0,"index":2796},{"krate":0,"index":2798},{"krate":0,"index":2800},{"krate":0,"index":2802},{"krate":0,"index":2804},{"krate":0,"index":2806},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":2808},{"krate":0,"index":2810},{"krate":0,"index":2812},{"krate":0,"index":2814},{"krate":0,"index":2816},{"krate":0,"index":2818},{"krate":0,"index":2820},{"krate":0,"index":2822},{"krate":0,"index":2824},{"krate":0,"index":2826},{"krate":0,"index":2828},{"krate":0,"index":2830},{"krate":0,"index":442},{"krate":0,"index":2832},{"krate":0,"index":2834},{"krate":0,"index":2836},{"krate":0,"index":2838},{"krate":0,"index":2840},{"krate":0,"index":2842},{"krate":0,"index":2844},{"krate":0,"index":2846},{"krate":0,"index":2848},{"krate":0,"index":2850},{"krate":0,"index":2852},{"krate":0,"index":2854},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":456}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":142808,"byte_end":142819,"line_start":24,"line_end":24,"column_start":11,"column_end":22},"name":"WrappingAdd","qualname":"::ops::wrapping::WrappingAdd","value":"WrappingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":434}],"decl_id":null,"docs":" Performs addition that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":142978,"byte_end":142990,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"wrapping_add","qualname":"::ops::wrapping::WrappingAdd::wrapping_add","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":433},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of\n the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":143702,"byte_end":143713,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"WrappingSub","qualname":"::ops::wrapping::WrappingSub","value":"WrappingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":436}],"decl_id":null,"docs":" Performs subtraction that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":143875,"byte_end":143887,"line_start":50,"line_end":50,"column_start":8,"column_end":20},"name":"wrapping_sub","qualname":"::ops::wrapping::WrappingSub::wrapping_sub","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":435},"children":[],"decl_id":null,"docs":" Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":144602,"byte_end":144613,"line_start":70,"line_end":70,"column_start":11,"column_end":22},"name":"WrappingMul","qualname":"::ops::wrapping::WrappingMul","value":"WrappingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":438}],"decl_id":null,"docs":" Performs multiplication that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":144778,"byte_end":144790,"line_start":73,"line_end":73,"column_start":8,"column_end":20},"name":"wrapping_mul","qualname":"::ops::wrapping::WrappingMul::wrapping_mul","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":145759,"byte_end":145770,"line_start":104,"line_end":104,"column_start":11,"column_end":22},"name":"WrappingShl","qualname":"::ops::wrapping::WrappingShl","value":"WrappingShl: Sized + Shl<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":441}],"decl_id":null,"docs":" Performs a left shift that does not panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":146377,"byte_end":146389,"line_start":119,"line_end":119,"column_start":8,"column_end":20},"name":"wrapping_shl","qualname":"::ops::wrapping::WrappingShl::wrapping_shl","value":"fn (&self, rhs: u32) -> Self","parent":{"krate":0,"index":440},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-left; yields `self << mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":147165,"byte_end":147176,"line_start":139,"line_end":139,"column_start":11,"column_end":22},"name":"WrappingShr","qualname":"::ops::wrapping::WrappingShr","value":"WrappingShr: Sized + Shr<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":443}],"decl_id":null,"docs":" Performs a right shift that does not panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":147784,"byte_end":147796,"line_start":154,"line_end":154,"column_start":8,"column_end":20},"name":"wrapping_shr","qualname":"::ops::wrapping::WrappingShr::wrapping_shr","value":"fn (&self, rhs: u32) -> Self","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\pow.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pow","qualname":"::pow","value":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\pow.rs","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":465},{"krate":0,"index":469},{"krate":0,"index":2856},{"krate":0,"index":2859},{"krate":0,"index":2863},{"krate":0,"index":2867},{"krate":0,"index":2872},{"krate":0,"index":2875},{"krate":0,"index":2879},{"krate":0,"index":2883},{"krate":0,"index":2888},{"krate":0,"index":2891},{"krate":0,"index":2895},{"krate":0,"index":2899},{"krate":0,"index":2904},{"krate":0,"index":2907},{"krate":0,"index":2911},{"krate":0,"index":2915},{"krate":0,"index":2920},{"krate":0,"index":2923},{"krate":0,"index":2927},{"krate":0,"index":2931},{"krate":0,"index":2936},{"krate":0,"index":2939},{"krate":0,"index":2943},{"krate":0,"index":2947},{"krate":0,"index":2952},{"krate":0,"index":2955},{"krate":0,"index":2959},{"krate":0,"index":2963},{"krate":0,"index":2968},{"krate":0,"index":2971},{"krate":0,"index":2975},{"krate":0,"index":2979},{"krate":0,"index":2984},{"krate":0,"index":2987},{"krate":0,"index":2991},{"krate":0,"index":2995},{"krate":0,"index":3000},{"krate":0,"index":3003},{"krate":0,"index":3007},{"krate":0,"index":3011},{"krate":0,"index":3016},{"krate":0,"index":3019},{"krate":0,"index":3023},{"krate":0,"index":3027},{"krate":0,"index":3032},{"krate":0,"index":3035},{"krate":0,"index":3039},{"krate":0,"index":3043},{"krate":0,"index":3048},{"krate":0,"index":3051},{"krate":0,"index":3055},{"krate":0,"index":3059},{"krate":0,"index":3064},{"krate":0,"index":3067},{"krate":0,"index":3071},{"krate":0,"index":3075},{"krate":0,"index":3080},{"krate":0,"index":3083},{"krate":0,"index":3087},{"krate":0,"index":3091},{"krate":0,"index":3096},{"krate":0,"index":3099},{"krate":0,"index":3103},{"krate":0,"index":3107},{"krate":0,"index":3112},{"krate":0,"index":3115},{"krate":0,"index":3119},{"krate":0,"index":3123},{"krate":0,"index":3128},{"krate":0,"index":3131},{"krate":0,"index":3135},{"krate":0,"index":3139},{"krate":0,"index":3144},{"krate":0,"index":3147},{"krate":0,"index":3151},{"krate":0,"index":3155},{"krate":0,"index":3160},{"krate":0,"index":3163},{"krate":0,"index":3167},{"krate":0,"index":3171},{"krate":0,"index":3176},{"krate":0,"index":3179},{"krate":0,"index":3183},{"krate":0,"index":3187},{"krate":0,"index":3192},{"krate":0,"index":3195},{"krate":0,"index":3199},{"krate":0,"index":3203},{"krate":0,"index":3208},{"krate":0,"index":3211},{"krate":0,"index":3215},{"krate":0,"index":3219},{"krate":0,"index":3224},{"krate":0,"index":3227},{"krate":0,"index":3231},{"krate":0,"index":3235},{"krate":0,"index":3240},{"krate":0,"index":3243},{"krate":0,"index":3247},{"krate":0,"index":3251},{"krate":0,"index":3256},{"krate":0,"index":3259},{"krate":0,"index":3263},{"krate":0,"index":3267},{"krate":0,"index":3272},{"krate":0,"index":3275},{"krate":0,"index":3279},{"krate":0,"index":3283},{"krate":0,"index":3288},{"krate":0,"index":3291},{"krate":0,"index":3295},{"krate":0,"index":3299},{"krate":0,"index":3304},{"krate":0,"index":3307},{"krate":0,"index":3311},{"krate":0,"index":3315},{"krate":0,"index":3320},{"krate":0,"index":3323},{"krate":0,"index":3327},{"krate":0,"index":3331},{"krate":0,"index":3336},{"krate":0,"index":3339},{"krate":0,"index":3343},{"krate":0,"index":3347},{"krate":0,"index":3352},{"krate":0,"index":3355},{"krate":0,"index":3359},{"krate":0,"index":3363},{"krate":0,"index":3368},{"krate":0,"index":3371},{"krate":0,"index":3375},{"krate":0,"index":3379},{"krate":0,"index":3384},{"krate":0,"index":3387},{"krate":0,"index":3391},{"krate":0,"index":3395},{"krate":0,"index":3400},{"krate":0,"index":3403},{"krate":0,"index":3407},{"krate":0,"index":3411},{"krate":0,"index":3416},{"krate":0,"index":3419},{"krate":0,"index":3423},{"krate":0,"index":3427},{"krate":0,"index":3432},{"krate":0,"index":3435},{"krate":0,"index":3439},{"krate":0,"index":3443},{"krate":0,"index":3448},{"krate":0,"index":3451},{"krate":0,"index":3455},{"krate":0,"index":3459},{"krate":0,"index":3464},{"krate":0,"index":3467},{"krate":0,"index":3471},{"krate":0,"index":3475},{"krate":0,"index":3480},{"krate":0,"index":3483},{"krate":0,"index":3487},{"krate":0,"index":3491},{"krate":0,"index":3496},{"krate":0,"index":3499},{"krate":0,"index":3503},{"krate":0,"index":3507},{"krate":0,"index":3512},{"krate":0,"index":3515},{"krate":0,"index":3519},{"krate":0,"index":3523},{"krate":0,"index":3528},{"krate":0,"index":3531},{"krate":0,"index":3535},{"krate":0,"index":3539},{"krate":0,"index":3544},{"krate":0,"index":3547},{"krate":0,"index":3551},{"krate":0,"index":3555},{"krate":0,"index":3560},{"krate":0,"index":3563},{"krate":0,"index":3567},{"krate":0,"index":3571},{"krate":0,"index":3576},{"krate":0,"index":3579},{"krate":0,"index":3583},{"krate":0,"index":3587},{"krate":0,"index":3592},{"krate":0,"index":3595},{"krate":0,"index":3599},{"krate":0,"index":3603},{"krate":0,"index":3608},{"krate":0,"index":3611},{"krate":0,"index":3615},{"krate":0,"index":3619},{"krate":0,"index":3624},{"krate":0,"index":3627},{"krate":0,"index":3631},{"krate":0,"index":3635},{"krate":0,"index":3640},{"krate":0,"index":3643},{"krate":0,"index":3647},{"krate":0,"index":3651},{"krate":0,"index":3656},{"krate":0,"index":3659},{"krate":0,"index":3663},{"krate":0,"index":3667},{"krate":0,"index":3672},{"krate":0,"index":3675},{"krate":0,"index":3679},{"krate":0,"index":3683},{"krate":0,"index":3688},{"krate":0,"index":3691},{"krate":0,"index":3695},{"krate":0,"index":3699},{"krate":0,"index":3704},{"krate":0,"index":3707},{"krate":0,"index":3711},{"krate":0,"index":3715},{"krate":0,"index":3720},{"krate":0,"index":3723},{"krate":0,"index":3727},{"krate":0,"index":3731},{"krate":0,"index":3736},{"krate":0,"index":3739},{"krate":0,"index":3743},{"krate":0,"index":3747},{"krate":0,"index":3752},{"krate":0,"index":3755},{"krate":0,"index":3759},{"krate":0,"index":3763},{"krate":0,"index":3768},{"krate":0,"index":3771},{"krate":0,"index":3775},{"krate":0,"index":3779},{"krate":0,"index":3784},{"krate":0,"index":3787},{"krate":0,"index":3791},{"krate":0,"index":3795},{"krate":0,"index":3800},{"krate":0,"index":3803},{"krate":0,"index":3807},{"krate":0,"index":3811},{"krate":0,"index":3816},{"krate":0,"index":3819},{"krate":0,"index":3823},{"krate":0,"index":3827},{"krate":0,"index":3832},{"krate":0,"index":3835},{"krate":0,"index":3839},{"krate":0,"index":3843},{"krate":0,"index":3848},{"krate":0,"index":3851},{"krate":0,"index":3855},{"krate":0,"index":3859},{"krate":0,"index":3864},{"krate":0,"index":3867},{"krate":0,"index":3871},{"krate":0,"index":3875},{"krate":0,"index":3880},{"krate":0,"index":3883},{"krate":0,"index":3887},{"krate":0,"index":3891},{"krate":0,"index":3896},{"krate":0,"index":3899},{"krate":0,"index":3903},{"krate":0,"index":3907},{"krate":0,"index":3912},{"krate":0,"index":3915},{"krate":0,"index":3919},{"krate":0,"index":3923},{"krate":0,"index":3928},{"krate":0,"index":3931},{"krate":0,"index":3935},{"krate":0,"index":3939},{"krate":0,"index":3944},{"krate":0,"index":3947},{"krate":0,"index":3951},{"krate":0,"index":3955},{"krate":0,"index":3960},{"krate":0,"index":3963},{"krate":0,"index":3967},{"krate":0,"index":3971},{"krate":0,"index":3976},{"krate":0,"index":3979},{"krate":0,"index":3983},{"krate":0,"index":3987},{"krate":0,"index":3992},{"krate":0,"index":3995},{"krate":0,"index":3999},{"krate":0,"index":4003},{"krate":0,"index":470},{"krate":0,"index":473},{"krate":0,"index":475}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\pow.rs","byte_start":151443,"byte_end":151446,"line_start":6,"line_end":6,"column_start":11,"column_end":14},"name":"Pow","qualname":"::pow::Pow","value":"Pow<RHS>","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":468}],"decl_id":null,"docs":" Binary operator for raising a value to a power.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\pow.rs","byte_start":151511,"byte_end":151517,"line_start":8,"line_end":8,"column_start":10,"column_end":16},"name":"Output","qualname":"::pow::Pow::Output","value":"type Output;","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\pow.rs","byte_start":151706,"byte_end":151709,"line_start":18,"line_end":18,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::Pow::pow","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Returns `self` to the power `rhs`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\pow.rs","byte_start":156536,"byte_end":156539,"line_start":189,"line_end":189,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::pow","value":"fn <T> (mut base: T, mut exp: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, using exponentiation by squaring.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\pow.rs","byte_start":156519,"byte_end":156528,"line_start":188,"line_end":188,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":475},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\pow.rs","byte_start":157545,"byte_end":157556,"line_start":230,"line_end":230,"column_start":8,"column_end":19},"name":"checked_pow","qualname":"::pow::checked_pow","value":"fn <T> (mut base: T, mut exp: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, returning `None` if an overflow occurred.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\pow.rs","byte_start":157528,"byte_end":157537,"line_start":229,"line_end":229,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"real","qualname":"::real","value":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":484},{"krate":0,"index":532}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", feature = \"libm\"))","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":158256,"byte_end":158303,"line_start":1,"line_end":1,"column_start":1,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":158900,"byte_end":158904,"line_start":17,"line_end":17,"column_start":11,"column_end":15},"name":"Real","qualname":"::real::Real","value":"Real: Num + Copy + NumCast + PartialOrd + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531}],"decl_id":null,"docs":" A trait for real number types that do not necessarily have\n floating-point-specific characteristics such as NaN and infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":159221,"byte_end":159230,"line_start":28,"line_end":28,"column_start":8,"column_end":17},"name":"min_value","qualname":"::real::Real::min_value","value":"fn () -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":159533,"byte_end":159551,"line_start":40,"line_end":40,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::real::Real::min_positive_value","value":"fn () -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":159932,"byte_end":159939,"line_start":57,"line_end":57,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::real::Real::epsilon","value":"fn () -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":160201,"byte_end":160210,"line_start":68,"line_end":68,"column_start":8,"column_end":17},"name":"max_value","qualname":"::real::Real::max_value","value":"fn () -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":160497,"byte_end":160502,"line_start":81,"line_end":81,"column_start":8,"column_end":13},"name":"floor","qualname":"::real::Real::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":160795,"byte_end":160799,"line_start":94,"line_end":94,"column_start":8,"column_end":12},"name":"ceil","qualname":"::real::Real::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":161118,"byte_end":161123,"line_start":108,"line_end":108,"column_start":8,"column_end":13},"name":"round","qualname":"::real::Real::round","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from\n `0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":161392,"byte_end":161397,"line_start":121,"line_end":121,"column_start":8,"column_end":13},"name":"trunc","qualname":"::real::Real::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":161798,"byte_end":161803,"line_start":136,"line_end":136,"column_start":8,"column_end":13},"name":"fract","qualname":"::real::Real::fract","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":162358,"byte_end":162361,"line_start":156,"line_end":156,"column_start":8,"column_end":11},"name":"abs","qualname":"::real::Real::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `Float::nan()` if the\n number is `Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":162933,"byte_end":162939,"line_start":175,"line_end":175,"column_start":8,"column_end":14},"name":"signum","qualname":"::real::Real::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":163420,"byte_end":163436,"line_start":193,"line_end":193,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::real::Real::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0`,\n `Float::infinity()`, and with newer versions of Rust `f64::NAN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":163913,"byte_end":163929,"line_start":211,"line_end":211,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::real::Real::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0`,\n `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":164546,"byte_end":164553,"line_start":231,"line_end":231,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::real::Real::mul_add","value":"fn (self, a: Self, b: Self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":164857,"byte_end":164862,"line_start":243,"line_end":243,"column_start":8,"column_end":13},"name":"recip","qualname":"::real::Real::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Take the reciprocal (inverse) of a number, `1/x`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":165204,"byte_end":165208,"line_start":257,"line_end":257,"column_start":8,"column_end":12},"name":"powi","qualname":"::real::Real::powi","value":"fn (self, n: i32) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":165489,"byte_end":165493,"line_start":269,"line_end":269,"column_start":8,"column_end":12},"name":"powf","qualname":"::real::Real::powf","value":"fn (self, n: Self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Raise a number to a real number power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":166085,"byte_end":166089,"line_start":290,"line_end":290,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::real::Real::sqrt","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Take the square root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":166444,"byte_end":166447,"line_start":306,"line_end":306,"column_start":8,"column_end":11},"name":"exp","qualname":"::real::Real::exp","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns `e^(self)`, (the exponential function).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":166730,"byte_end":166734,"line_start":320,"line_end":320,"column_start":8,"column_end":12},"name":"exp2","qualname":"::real::Real::exp2","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns `2^(self)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":167223,"byte_end":167225,"line_start":340,"line_end":340,"column_start":8,"column_end":10},"name":"ln","qualname":"::real::Real::ln","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns the natural logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":167877,"byte_end":167880,"line_start":363,"line_end":363,"column_start":8,"column_end":11},"name":"log","qualname":"::real::Real::log","value":"fn (self, base: Self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns the logarithm of the number with respect to an arbitrary base.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":168344,"byte_end":168348,"line_start":381,"line_end":381,"column_start":8,"column_end":12},"name":"log2","qualname":"::real::Real::log2","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns the base 2 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":168813,"byte_end":168818,"line_start":400,"line_end":400,"column_start":8,"column_end":13},"name":"log10","qualname":"::real::Real::log10","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns the base 10 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":169103,"byte_end":169113,"line_start":413,"line_end":413,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::real::Real::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Converts radians to degrees.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":169402,"byte_end":169412,"line_start":426,"line_end":426,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::real::Real::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Converts degrees to radians.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":169643,"byte_end":169646,"line_start":438,"line_end":438,"column_start":8,"column_end":11},"name":"max","qualname":"::real::Real::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":169890,"byte_end":169893,"line_start":450,"line_end":450,"column_start":8,"column_end":11},"name":"min","qualname":"::real::Real::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":170396,"byte_end":170403,"line_start":469,"line_end":469,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::real::Real::abs_sub","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":170716,"byte_end":170720,"line_start":483,"line_end":483,"column_start":8,"column_end":12},"name":"cbrt","qualname":"::real::Real::cbrt","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Take the cubic root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":171143,"byte_end":171148,"line_start":499,"line_end":499,"column_start":8,"column_end":13},"name":"hypot","qualname":"::real::Real::hypot","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Calculate the length of the hypotenuse of a right-angle triangle given\n legs of length `x` and `y`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":171481,"byte_end":171484,"line_start":513,"line_end":513,"column_start":8,"column_end":11},"name":"sin","qualname":"::real::Real::sin","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Computes the sine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":171806,"byte_end":171809,"line_start":527,"line_end":527,"column_start":8,"column_end":11},"name":"cos","qualname":"::real::Real::cos","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Computes the cosine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":172124,"byte_end":172127,"line_start":540,"line_end":540,"column_start":8,"column_end":11},"name":"tan","qualname":"::real::Real::tan","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Computes the tangent of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":172784,"byte_end":172788,"line_start":562,"line_end":562,"column_start":8,"column_end":12},"name":"asin","qualname":"::real::Real::asin","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Computes the arcsine of a number. Return value is in radians in\n the range [-pi/2, pi/2] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":173441,"byte_end":173445,"line_start":584,"line_end":584,"column_start":8,"column_end":12},"name":"acos","qualname":"::real::Real::acos","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Computes the arccosine of a number. Return value is in radians in\n the range [0, pi] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":173814,"byte_end":173818,"line_start":599,"line_end":599,"column_start":8,"column_end":12},"name":"atan","qualname":"::real::Real::atan","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Computes the arctangent of a number. Return value is in radians in the\n range [-pi/2, pi/2];","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":174704,"byte_end":174709,"line_start":628,"line_end":628,"column_start":8,"column_end":13},"name":"atan2","qualname":"::real::Real::atan2","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":175228,"byte_end":175235,"line_start":646,"line_end":646,"column_start":8,"column_end":15},"name":"sin_cos","qualname":"::real::Real::sin_cos","value":"fn (self) -> (Self, Self)","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Simultaneously computes the sine and cosine of the number, `x`. Returns\n `(sin(x), cos(x))`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":175608,"byte_end":175614,"line_start":661,"line_end":661,"column_start":8,"column_end":14},"name":"exp_m1","qualname":"::real::Real::exp_m1","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns `e^(self) - 1` in a way that is accurate even if the\n number is close to zero.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":176192,"byte_end":176197,"line_start":682,"line_end":682,"column_start":8,"column_end":13},"name":"ln_1p","qualname":"::real::Real::ln_1p","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Returns `ln(1+n)` (natural logarithm) more accurately than if\n the operations were performed separately.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":176622,"byte_end":176626,"line_start":700,"line_end":700,"column_start":8,"column_end":12},"name":"sinh","qualname":"::real::Real::sinh","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":177067,"byte_end":177071,"line_start":718,"line_end":718,"column_start":8,"column_end":12},"name":"cosh","qualname":"::real::Real::cosh","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":177532,"byte_end":177536,"line_start":736,"line_end":736,"column_start":8,"column_end":12},"name":"tanh","qualname":"::real::Real::tanh","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":177836,"byte_end":177841,"line_start":750,"line_end":750,"column_start":8,"column_end":13},"name":"asinh","qualname":"::real::Real::asinh","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Inverse hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":178143,"byte_end":178148,"line_start":764,"line_end":764,"column_start":8,"column_end":13},"name":"acosh","qualname":"::real::Real::acosh","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Inverse hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":178484,"byte_end":178489,"line_start":779,"line_end":779,"column_start":8,"column_end":13},"name":"atanh","qualname":"::real::Real::atanh","value":"fn (self) -> Self","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Inverse hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sign","qualname":"::sign","value":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":545},{"krate":0,"index":4263},{"krate":0,"index":4269},{"krate":0,"index":4275},{"krate":0,"index":4281},{"krate":0,"index":4287},{"krate":0,"index":4293},{"krate":0,"index":546},{"krate":0,"index":553},{"krate":0,"index":4299},{"krate":0,"index":4305},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":4311},{"krate":0,"index":4312},{"krate":0,"index":4313},{"krate":0,"index":4314},{"krate":0,"index":4315},{"krate":0,"index":4316},{"krate":0,"index":562}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":180573,"byte_end":180579,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Signed","qualname":"::sign::Signed","value":"Signed: Sized + Num + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544}],"decl_id":null,"docs":" Useful functions for signed numbers (i.e. numbers that can be negative).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":180832,"byte_end":180835,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::Signed::abs","value":"fn (&self) -> Self","parent":{"krate":0,"index":539},"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":181060,"byte_end":181067,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::Signed::abs_sub","value":"fn (&self, other: &Self) -> Self","parent":{"krate":0,"index":539},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":181525,"byte_end":181531,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::Signed::signum","value":"fn (&self) -> Self","parent":{"krate":0,"index":539},"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":181648,"byte_end":181659,"line_start":38,"line_end":38,"column_start":8,"column_end":19},"name":"is_positive","qualname":"::sign::Signed::is_positive","value":"fn (&self) -> bool","parent":{"krate":0,"index":539},"children":[],"decl_id":null,"docs":" Returns true if the number is positive and false if the number is zero or negative.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":181776,"byte_end":181787,"line_start":41,"line_end":41,"column_start":8,"column_end":19},"name":"is_negative","qualname":"::sign::Signed::is_negative","value":"fn (&self) -> bool","parent":{"krate":0,"index":539},"children":[],"decl_id":null,"docs":" Returns true if the number is negative and false if the number is zero or positive.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":184981,"byte_end":184984,"line_start":165,"line_end":165,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::abs","value":"fn <T> (value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":184956,"byte_end":184973,"line_start":164,"line_end":164,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":185221,"byte_end":185228,"line_start":174,"line_end":174,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::abs_sub","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":185196,"byte_end":185213,"line_start":173,"line_end":173,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":185672,"byte_end":185678,"line_start":192,"line_end":192,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::signum","value":"fn <T> (value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":185647,"byte_end":185664,"line_start":191,"line_end":191,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":185787,"byte_end":185795,"line_start":197,"line_end":197,"column_start":11,"column_end":19},"name":"Unsigned","qualname":"::sign::Unsigned","value":"Unsigned: Num","parent":null,"children":[],"decl_id":null,"docs":" A trait for values which cannot be negative\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":564},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":2098,"byte_end":2101,"line_start":65,"line_end":65,"column_start":11,"column_end":14},"name":"Num","qualname":"::Num","value":"Num: PartialEq + Zero + One + NumOps","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566}],"decl_id":null,"docs":" The base trait for numeric types, covering `0` and `1` values,\n comparisons, basic numeric operations, and string conversion.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":2146,"byte_end":2161,"line_start":66,"line_end":66,"column_start":10,"column_end":25},"name":"FromStrRadixErr","qualname":"::Num::FromStrRadixErr","value":"type FromStrRadixErr;","parent":{"krate":0,"index":564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":2519,"byte_end":2533,"line_start":81,"line_end":81,"column_start":8,"column_end":22},"name":"from_str_radix","qualname":"::Num::from_str_radix","value":"fn (str: &str, radix: u32) -> Result<Self, Self::FromStrRadixErr>","parent":{"krate":0,"index":564},"children":[],"decl_id":null,"docs":" Convert from a string and radix <= 36.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":2755,"byte_end":2761,"line_start":87,"line_end":87,"column_start":11,"column_end":17},"name":"NumOps","qualname":"::NumOps","value":"NumOps<Rhs = Self, Output = Self>: Add<Rhs, Output = Output> + Sub<Rhs, Output = Output> + Mul<Rhs, Output =\nOutput> + Div<Rhs, Output = Output> + Rem<Rhs, Output = Output>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing basic numeric operations","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":3395,"byte_end":3401,"line_start":109,"line_end":109,"column_start":11,"column_end":17},"name":"NumRef","qualname":"::NumRef","value":"NumRef: Num + for<'r> NumOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement numeric operations taking\n the second operand by reference.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":579},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":3720,"byte_end":3726,"line_start":116,"line_end":116,"column_start":11,"column_end":17},"name":"RefNum","qualname":"::RefNum","value":"RefNum<Base>: NumOps<Base, Base> + for<'r> NumOps<&'r Base, Base>","parent":null,"children":[],"decl_id":null,"docs":" The trait for references which implement numeric operations, taking the\n second operand either by value or by reference.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":586},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4059,"byte_end":4071,"line_start":122,"line_end":122,"column_start":11,"column_end":23},"name":"NumAssignOps","qualname":"::NumAssignOps","value":"NumAssignOps<Rhs = Self>: AddAssign<Rhs> + SubAssign<Rhs> + MulAssign<Rhs> + DivAssign<Rhs> +\nRemAssign<Rhs>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing numeric assignment operators (like `+=`).","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":591},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4481,"byte_end":4490,"line_start":135,"line_end":135,"column_start":11,"column_end":20},"name":"NumAssign","qualname":"::NumAssign","value":"NumAssign: Num + NumAssignOps","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement assignment operators.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":594},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4786,"byte_end":4798,"line_start":142,"line_end":142,"column_start":11,"column_end":23},"name":"NumAssignRef","qualname":"::NumAssignRef","value":"NumAssignRef: NumAssign + for<'r> NumAssignOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `NumAssign` types which also implement assignment operations\n taking the second operand by reference.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4354},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":5920,"byte_end":5925,"line_start":178,"line_end":178,"column_start":5,"column_end":10},"name":"Empty","qualname":"::FloatErrorKind::Empty","value":"FloatErrorKind::Empty","parent":{"krate":0,"index":4353},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4356},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":5931,"byte_end":5938,"line_start":179,"line_end":179,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::FloatErrorKind::Invalid","value":"FloatErrorKind::Invalid","parent":{"krate":0,"index":4353},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4353},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":5899,"byte_end":5913,"line_start":177,"line_end":177,"column_start":10,"column_end":24},"name":"FloatErrorKind","qualname":"::FloatErrorKind","value":"FloatErrorKind::{Empty, Invalid}","parent":null,"children":[{"krate":0,"index":4354},{"krate":0,"index":4356}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4360},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":6096,"byte_end":6111,"line_start":184,"line_end":184,"column_start":12,"column_end":27},"name":"ParseFloatError","qualname":"::ParseFloatError","value":"ParseFloatError { kind }","parent":null,"children":[{"krate":0,"index":4361}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4361},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":6122,"byte_end":6126,"line_start":185,"line_end":185,"column_start":9,"column_end":13},"name":"kind","qualname":"::ParseFloatError::kind","value":"FloatErrorKind","parent":{"krate":0,"index":4360},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":14398,"byte_end":14403,"line_start":373,"line_end":373,"column_start":8,"column_end":13},"name":"clamp","qualname":"::clamp","value":"fn <T> (input: T, min: T, max: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum and a maximum","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":14381,"byte_end":14390,"line_start":372,"line_end":372,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":14968,"byte_end":14977,"line_start":392,"line_end":392,"column_start":8,"column_end":17},"name":"clamp_min","qualname":"::clamp_min","value":"fn <T> (input: T, min: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum value","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":14951,"byte_end":14960,"line_start":391,"line_end":391,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":611},"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":15479,"byte_end":15488,"line_start":409,"line_end":409,"column_start":8,"column_end":17},"name":"clamp_max","qualname":"::clamp_max","value":"fn <T> (input: T, max: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a maximum value","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":15462,"byte_end":15471,"line_start":408,"line_end":408,"column_start":1,"column_end":10}}]}],"impls":[{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\bounds.rs","byte_start":21749,"byte_end":21757,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":43111,"byte_end":43119,"line_start":583,"line_end":583,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":43887,"byte_end":43895,"line_start":616,"line_end":616,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":45898,"byte_end":45906,"line_start":693,"line_end":693,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":111653,"byte_end":111661,"line_start":65,"line_end":65,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":113638,"byte_end":113646,"line_start":154,"line_end":154,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":510,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":148610,"byte_end":148618,"line_start":174,"line_end":174,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":511,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":148810,"byte_end":148818,"line_start":182,"line_end":182,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":512,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":149010,"byte_end":149018,"line_start":190,"line_end":190,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":513,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":149210,"byte_end":149218,"line_start":198,"line_end":198,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":514,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":149416,"byte_end":149424,"line_start":206,"line_end":206,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":685,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":178532,"byte_end":178533,"line_start":782,"line_end":782,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4216},{"krate":0,"index":4217},{"krate":0,"index":4218},{"krate":0,"index":4219},{"krate":0,"index":4220},{"krate":0,"index":4221},{"krate":0,"index":4222},{"krate":0,"index":4223},{"krate":0,"index":4224},{"krate":0,"index":4225},{"krate":0,"index":4226},{"krate":0,"index":4227},{"krate":0,"index":4228},{"krate":0,"index":4229},{"krate":0,"index":4230},{"krate":0,"index":4231},{"krate":0,"index":4232},{"krate":0,"index":4233},{"krate":0,"index":4234},{"krate":0,"index":4235},{"krate":0,"index":4236},{"krate":0,"index":4237},{"krate":0,"index":4238},{"krate":0,"index":4239},{"krate":0,"index":4240},{"krate":0,"index":4241},{"krate":0,"index":4242},{"krate":0,"index":4243},{"krate":0,"index":4244},{"krate":0,"index":4245},{"krate":0,"index":4246},{"krate":0,"index":4247},{"krate":0,"index":4248},{"krate":0,"index":4249},{"krate":0,"index":4250},{"krate":0,"index":4251},{"krate":0,"index":4252},{"krate":0,"index":4253},{"krate":0,"index":4254},{"krate":0,"index":4255},{"krate":0,"index":4256},{"krate":0,"index":4257},{"krate":0,"index":4258},{"krate":0,"index":4259},{"krate":0,"index":4260},{"krate":0,"index":4261},{"krate":0,"index":4262}],"docs":"","sig":null,"attributes":[]},{"id":692,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":182669,"byte_end":182677,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":701,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":186057,"byte_end":186065,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":702,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":2998,"byte_end":2999,"line_start":96,"line_end":96,"column_start":46,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":703,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":3456,"byte_end":3457,"line_start":110,"line_end":110,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":704,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":3820,"byte_end":3821,"line_start":117,"line_end":117,"column_start":32,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":705,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4212,"byte_end":4213,"line_start":127,"line_end":127,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":706,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4536,"byte_end":4537,"line_start":136,"line_end":136,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":707,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4871,"byte_end":4872,"line_start":143,"line_end":143,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":720,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":5471,"byte_end":5479,"line_start":162,"line_end":162,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":721,"kind":"Direct","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":6169,"byte_end":6184,"line_start":188,"line_end":188,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1830,"byte_end":1836,"line_start":53,"line_end":53,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":67}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1846,"byte_end":1850,"line_start":54,"line_end":54,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":98}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1860,"byte_end":1865,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":182}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1875,"byte_end":1885,"line_start":56,"line_end":56,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":290}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1895,"byte_end":1898,"line_start":57,"line_end":57,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":318}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1908,"byte_end":1911,"line_start":58,"line_end":58,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":350}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\mod.rs","byte_start":126023,"byte_end":126030,"line_start":1,"line_end":1,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":351}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\mod.rs","byte_start":126040,"byte_end":126043,"line_start":2,"line_end":2,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":379}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\mod.rs","byte_start":126053,"byte_end":126060,"line_start":3,"line_end":3,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":397}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\mod.rs","byte_start":126070,"byte_end":126080,"line_start":4,"line_end":4,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":419}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\mod.rs","byte_start":126090,"byte_end":126098,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":424}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1921,"byte_end":1924,"line_start":59,"line_end":59,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":459}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1934,"byte_end":1938,"line_start":60,"line_end":60,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":478}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":1948,"byte_end":1952,"line_start":61,"line_end":61,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":534}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\bounds.rs","byte_start":21749,"byte_end":21757,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"kind":{"Impl":{"id":12}},"from":{"krate":1,"index":11035},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":36291,"byte_end":36296,"line_start":379,"line_end":379,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":145}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":43111,"byte_end":43119,"line_start":583,"line_end":583,"column_start":38,"column_end":46},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":11035},"to":{"krate":0,"index":120}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":43887,"byte_end":43895,"line_start":616,"line_end":616,"column_start":42,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":11035},"to":{"krate":0,"index":145}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":44730,"byte_end":44735,"line_start":655,"line_end":655,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":170}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":44738,"byte_end":44749,"line_start":655,"line_end":655,"column_start":28,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":120},"to":{"krate":0,"index":170}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":45898,"byte_end":45906,"line_start":693,"line_end":693,"column_start":30,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":1,"index":11035},"to":{"krate":0,"index":170}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\cast.rs","byte_start":47140,"byte_end":47144,"line_start":734,"line_end":734,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1543},"to":{"krate":0,"index":178}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":48979,"byte_end":48982,"line_start":16,"line_end":16,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":564},"to":{"krate":0,"index":194}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":48985,"byte_end":48992,"line_start":16,"line_end":16,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":170},"to":{"krate":0,"index":194}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":48995,"byte_end":48998,"line_start":16,"line_end":16,"column_start":38,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1623},"to":{"krate":0,"index":194}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":49016,"byte_end":49026,"line_start":16,"line_end":16,"column_start":59,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":2077},"to":{"krate":0,"index":194}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":49029,"byte_end":49033,"line_start":16,"line_end":16,"column_start":72,"column_end":76},"kind":"SuperTrait","from":{"krate":1,"index":1543},"to":{"krate":0,"index":194}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":72663,"byte_end":72666,"line_start":905,"line_end":905,"column_start":18,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":564},"to":{"krate":0,"index":228}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":72669,"byte_end":72673,"line_start":905,"line_end":905,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1543},"to":{"krate":0,"index":228}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":72676,"byte_end":72683,"line_start":905,"line_end":905,"column_start":31,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":170},"to":{"krate":0,"index":228}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":72686,"byte_end":72696,"line_start":905,"line_end":905,"column_start":41,"column_end":51},"kind":"SuperTrait","from":{"krate":1,"index":2077},"to":{"krate":0,"index":228}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\float.rs","byte_start":72699,"byte_end":72702,"line_start":905,"line_end":905,"column_start":54,"column_end":57},"kind":"SuperTrait","from":{"krate":1,"index":1623},"to":{"krate":0,"index":228}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":110396,"byte_end":110401,"line_start":12,"line_end":12,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":110404,"byte_end":110407,"line_start":12,"line_end":12,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1596},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":111653,"byte_end":111661,"line_start":65,"line_end":65,"column_start":24,"column_end":32},"kind":{"Impl":{"id":284}},"from":{"krate":1,"index":11035},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":112090,"byte_end":112095,"line_start":90,"line_end":90,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":305}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":112098,"byte_end":112101,"line_start":90,"line_end":90,"column_start":24,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":1606},"to":{"krate":0,"index":305}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\identities.rs","byte_start":113638,"byte_end":113646,"line_start":154,"line_end":154,"column_start":22,"column_end":30},"kind":{"Impl":{"id":299}},"from":{"krate":1,"index":11035},"to":{"krate":0,"index":305}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116653,"byte_end":116658,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116665,"byte_end":116669,"line_start":36,"line_end":36,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":1543},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116676,"byte_end":116679,"line_start":37,"line_end":37,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":564},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116686,"byte_end":116693,"line_start":38,"line_end":38,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":170},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116700,"byte_end":116707,"line_start":39,"line_end":39,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":87},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116714,"byte_end":116724,"line_start":40,"line_end":40,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":2077},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116731,"byte_end":116734,"line_start":41,"line_end":41,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2066},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116741,"byte_end":116743,"line_start":42,"line_end":42,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":2045},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116750,"byte_end":116753,"line_start":43,"line_end":43,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1650},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116775,"byte_end":116781,"line_start":44,"line_end":44,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":1654},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116803,"byte_end":116808,"line_start":45,"line_end":45,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":1659},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116830,"byte_end":116836,"line_start":46,"line_end":46,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":1664},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116858,"byte_end":116861,"line_start":47,"line_end":47,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1669},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116890,"byte_end":116893,"line_start":48,"line_end":48,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1675},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116922,"byte_end":116932,"line_start":49,"line_end":49,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":360},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116954,"byte_end":116964,"line_start":50,"line_end":50,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":363},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":116986,"byte_end":116996,"line_start":51,"line_end":51,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":365},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":117018,"byte_end":117028,"line_start":52,"line_end":52,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":367},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\int.rs","byte_start":117050,"byte_end":117060,"line_start":53,"line_end":53,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":420},"to":{"krate":0,"index":332}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":126262,"byte_end":126267,"line_start":5,"line_end":5,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":360}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":126270,"byte_end":126273,"line_start":5,"line_end":5,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1596},"to":{"krate":0,"index":360}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":127403,"byte_end":127408,"line_start":39,"line_end":39,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":363}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":127411,"byte_end":127414,"line_start":39,"line_end":39,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1601},"to":{"krate":0,"index":363}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":128306,"byte_end":128311,"line_start":63,"line_end":63,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":365}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":128314,"byte_end":128317,"line_start":63,"line_end":63,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1606},"to":{"krate":0,"index":365}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":129274,"byte_end":129279,"line_start":87,"line_end":87,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":367}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":129282,"byte_end":129285,"line_start":87,"line_end":87,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1611},"to":{"krate":0,"index":367}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":130261,"byte_end":130266,"line_start":111,"line_end":111,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":369}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":130269,"byte_end":130272,"line_start":111,"line_end":111,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1617},"to":{"krate":0,"index":369}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":132040,"byte_end":132045,"line_start":162,"line_end":162,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":372}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":133489,"byte_end":133494,"line_start":200,"line_end":200,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":374}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":133497,"byte_end":133500,"line_start":200,"line_end":200,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1669},"to":{"krate":0,"index":374}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":135131,"byte_end":135136,"line_start":246,"line_end":246,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":377}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\checked.rs","byte_start":135139,"byte_end":135142,"line_start":246,"line_end":246,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1675},"to":{"krate":0,"index":377}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":142821,"byte_end":142826,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":433}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":142829,"byte_end":142832,"line_start":24,"line_end":24,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1596},"to":{"krate":0,"index":433}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":143715,"byte_end":143720,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":435}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":143723,"byte_end":143726,"line_start":47,"line_end":47,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1601},"to":{"krate":0,"index":435}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":144615,"byte_end":144620,"line_start":70,"line_end":70,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":437}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":144623,"byte_end":144626,"line_start":70,"line_end":70,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1606},"to":{"krate":0,"index":437}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":145772,"byte_end":145777,"line_start":104,"line_end":104,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":440}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":145780,"byte_end":145783,"line_start":104,"line_end":104,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1669},"to":{"krate":0,"index":440}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":147178,"byte_end":147183,"line_start":139,"line_end":139,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":442}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":147186,"byte_end":147189,"line_start":139,"line_end":139,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1675},"to":{"krate":0,"index":442}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":148610,"byte_end":148618,"line_start":174,"line_end":174,"column_start":38,"column_end":46},"kind":{"Impl":{"id":510}},"from":{"krate":1,"index":11035},"to":{"krate":0,"index":433}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":148810,"byte_end":148818,"line_start":182,"line_end":182,"column_start":38,"column_end":46},"kind":{"Impl":{"id":511}},"from":{"krate":1,"index":11035},"to":{"krate":0,"index":435}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":149010,"byte_end":149018,"line_start":190,"line_end":190,"column_start":38,"column_end":46},"kind":{"Impl":{"id":512}},"from":{"krate":1,"index":11035},"to":{"krate":0,"index":437}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":149210,"byte_end":149218,"line_start":198,"line_end":198,"column_start":38,"column_end":46},"kind":{"Impl":{"id":513}},"from":{"krate":1,"index":11035},"to":{"krate":0,"index":440}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\ops\\wrapping.rs","byte_start":149416,"byte_end":149424,"line_start":206,"line_end":206,"column_start":38,"column_end":46},"kind":{"Impl":{"id":514}},"from":{"krate":1,"index":11035},"to":{"krate":0,"index":442}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":158906,"byte_end":158909,"line_start":17,"line_end":17,"column_start":17,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":564},"to":{"krate":0,"index":484}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":158912,"byte_end":158916,"line_start":17,"line_end":17,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":1543},"to":{"krate":0,"index":484}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":158919,"byte_end":158926,"line_start":17,"line_end":17,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":170},"to":{"krate":0,"index":484}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":158929,"byte_end":158939,"line_start":17,"line_end":17,"column_start":40,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":2077},"to":{"krate":0,"index":484}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":158942,"byte_end":158945,"line_start":17,"line_end":17,"column_start":53,"column_end":56},"kind":"SuperTrait","from":{"krate":1,"index":1623},"to":{"krate":0,"index":484}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\real.rs","byte_start":178532,"byte_end":178533,"line_start":782,"line_end":782,"column_start":25,"column_end":26},"kind":{"Impl":{"id":685}},"from":{"krate":0,"index":533},"to":{"krate":0,"index":484}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":180581,"byte_end":180586,"line_start":8,"line_end":8,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":539}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":180589,"byte_end":180592,"line_start":8,"line_end":8,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":564},"to":{"krate":0,"index":539}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":180595,"byte_end":180598,"line_start":8,"line_end":8,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":1623},"to":{"krate":0,"index":539}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":182669,"byte_end":182677,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"kind":{"Impl":{"id":692}},"from":{"krate":1,"index":11035},"to":{"krate":0,"index":539}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":185797,"byte_end":185800,"line_start":197,"line_end":197,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":564},"to":{"krate":0,"index":560}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\sign.rs","byte_start":186057,"byte_end":186065,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"kind":{"Impl":{"id":701}},"from":{"krate":1,"index":11035},"to":{"krate":0,"index":560}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":2103,"byte_end":2112,"line_start":65,"line_end":65,"column_start":16,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":2040},"to":{"krate":0,"index":564}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":2115,"byte_end":2119,"line_start":65,"line_end":65,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":295},"to":{"krate":0,"index":564}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":2122,"byte_end":2125,"line_start":65,"line_end":65,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":305},"to":{"krate":0,"index":564}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":2128,"byte_end":2134,"line_start":65,"line_end":65,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":567},"to":{"krate":0,"index":564}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":2794,"byte_end":2797,"line_start":88,"line_end":88,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":1596},"to":{"krate":0,"index":567}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":2826,"byte_end":2829,"line_start":89,"line_end":89,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1601},"to":{"krate":0,"index":567}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":2858,"byte_end":2861,"line_start":90,"line_end":90,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1606},"to":{"krate":0,"index":567}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":2890,"byte_end":2893,"line_start":91,"line_end":91,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1611},"to":{"krate":0,"index":567}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":2922,"byte_end":2925,"line_start":92,"line_end":92,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1617},"to":{"krate":0,"index":567}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":2998,"byte_end":2999,"line_start":96,"line_end":96,"column_start":46,"column_end":47},"kind":{"Impl":{"id":702}},"from":{"krate":0,"index":571},"to":{"krate":0,"index":567}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":3403,"byte_end":3406,"line_start":109,"line_end":109,"column_start":19,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":564},"to":{"krate":0,"index":574}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":3417,"byte_end":3423,"line_start":109,"line_end":109,"column_start":33,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":567},"to":{"krate":0,"index":574}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":3456,"byte_end":3457,"line_start":110,"line_end":110,"column_start":20,"column_end":21},"kind":{"Impl":{"id":703}},"from":{"krate":0,"index":577},"to":{"krate":0,"index":574}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":3734,"byte_end":3740,"line_start":116,"line_end":116,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":567},"to":{"krate":0,"index":579}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":3763,"byte_end":3769,"line_start":116,"line_end":116,"column_start":54,"column_end":60},"kind":"SuperTrait","from":{"krate":0,"index":567},"to":{"krate":0,"index":579}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":3820,"byte_end":3821,"line_start":117,"line_end":117,"column_start":32,"column_end":33},"kind":{"Impl":{"id":704}},"from":{"krate":0,"index":583},"to":{"krate":0,"index":579}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4089,"byte_end":4098,"line_start":123,"line_end":123,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":1629},"to":{"krate":0,"index":586}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4106,"byte_end":4115,"line_start":123,"line_end":123,"column_start":22,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1633},"to":{"krate":0,"index":586}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4123,"byte_end":4132,"line_start":123,"line_end":123,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":1637},"to":{"krate":0,"index":586}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4140,"byte_end":4149,"line_start":123,"line_end":123,"column_start":56,"column_end":65},"kind":"SuperTrait","from":{"krate":1,"index":1641},"to":{"krate":0,"index":586}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4157,"byte_end":4166,"line_start":123,"line_end":123,"column_start":73,"column_end":82},"kind":"SuperTrait","from":{"krate":1,"index":1645},"to":{"krate":0,"index":586}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4212,"byte_end":4213,"line_start":127,"line_end":127,"column_start":36,"column_end":37},"kind":{"Impl":{"id":705}},"from":{"krate":0,"index":589},"to":{"krate":0,"index":586}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4492,"byte_end":4495,"line_start":135,"line_end":135,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":564},"to":{"krate":0,"index":591}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4498,"byte_end":4510,"line_start":135,"line_end":135,"column_start":28,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":586},"to":{"krate":0,"index":591}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4536,"byte_end":4537,"line_start":136,"line_end":136,"column_start":23,"column_end":24},"kind":{"Impl":{"id":706}},"from":{"krate":0,"index":593},"to":{"krate":0,"index":591}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4800,"byte_end":4809,"line_start":142,"line_end":142,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":591},"to":{"krate":0,"index":594}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4820,"byte_end":4832,"line_start":142,"line_end":142,"column_start":45,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":586},"to":{"krate":0,"index":594}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":4871,"byte_end":4872,"line_start":143,"line_end":143,"column_start":26,"column_end":27},"kind":{"Impl":{"id":707}},"from":{"krate":0,"index":597},"to":{"krate":0,"index":594}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":5471,"byte_end":5479,"line_start":162,"line_end":162,"column_start":22,"column_end":30},"kind":{"Impl":{"id":720}},"from":{"krate":1,"index":11035},"to":{"krate":0,"index":564}},{"span":{"file_name":"C:\\Users\\Spencer Du\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.11\\src\\lib.rs","byte_start":6169,"byte_end":6184,"line_start":188,"line_end":188,"column_start":23,"column_end":38},"kind":{"Impl":{"id":721}},"from":{"krate":0,"index":4360},"to":{"krate":1,"index":7648}}]}